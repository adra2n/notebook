{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "import copy\n",
    "import json\n",
    "import os\n",
    "import time\n",
    "from datetime import datetime\n",
    "from pprint import pprint\n",
    "import redis\n",
    "import requests\n",
    "from celery import Celery, Task, platforms\n",
    "from openpyxl import Workbook\n",
    "from openpyxl.styles import Alignment, Border, Font, PatternFill, Side, colors\n",
    "from openpyxl.utils import column_index_from_string, get_column_letter\n",
    "from pymongo import MongoClient\n",
    "\n",
    "import conf\n",
    "\n",
    "class ReportTask():\n",
    "    abstract = True\n",
    "    _rdb1 = None\n",
    "    _rdb2 = None\n",
    "    _mdb = None\n",
    "\n",
    "    @property\n",
    "    def rdb_1(self):\n",
    "        if self._rdb1 is None:\n",
    "            self._rdb1 = redis.StrictRedis(host=conf.REDIS_PAYMENT_HOST,\n",
    "                                           port=conf.REDIS_ACTIVITY_PORT,\n",
    "                                           db=conf.REDIS_ACTIVITY_DB_1,\n",
    "                                           charset=\"utf-8\",\n",
    "                                           decode_responses=True)\n",
    "        return self._rdb1\n",
    "\n",
    "    @property\n",
    "    def rdb_2(self):\n",
    "        if self._rdb2 is None:\n",
    "            self._rdb2 = redis.StrictRedis(host=conf.REDIS_PAYMENT_HOST,\n",
    "                                           port=conf.REDIS_ACTIVITY_PORT,\n",
    "                                           db=conf.REDIS_ACTIVITY_DB_2,\n",
    "                                           charset=\"utf-8\",\n",
    "                                           decode_responses=True)\n",
    "        return self._rdb2\n",
    "\n",
    "    @property\n",
    "    def mdb(self):\n",
    "        if self._mdb is None:\n",
    "            _mc = MongoClient(conf.MONGO_HOST, replicaset=conf.REPLICASET_NAME)\n",
    "            self._mdb = _mc['boluome']\n",
    "        return self._mdb\n",
    "\n",
    "r=ReportTask()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "def generate_transaction_report(reports_data, field_headers, out_path):\n",
    "    wb = Workbook()\n",
    "    ws = wb.active\n",
    "    ws.append(field_headers)\n",
    "\n",
    "    def render_report(ws):\n",
    "        # 冻结第一行\n",
    "        ws.freeze_panes = 'A2'\n",
    "        for i in range(1, ws.max_column + 1):\n",
    "            # 抬头第一行 设置填充色、字体格式、居中\n",
    "            ws['{}1'.format(get_column_letter(i))].fill = PatternFill(\"solid\", fgColor=\"FEC000\")\n",
    "            ws['{}1'.format(get_column_letter(i))].font = Font(name=\"微软雅黑\", size=12, bold=True)\n",
    "            ws['{}1'.format(get_column_letter(i))].alignment = Alignment(horizontal='center', vertical='center')\n",
    "\n",
    "        # 为 所有表格设置边框和字体。\n",
    "        left, right, top, bottom = [Side(style='thin', color='000000')] * 4\n",
    "        for row in range(1, ws.max_row + 1):\n",
    "            for col in range(1, ws.max_column + 1):\n",
    "                ws.cell(row=row, column=col).border = Border(\n",
    "                    left=left, right=right, top=top, bottom=bottom)  # 设置单元格边框格式\n",
    "\n",
    "        for row in range(2, ws.max_row + 1):\n",
    "            for col in range(1, ws.max_column + 1):\n",
    "                ws.cell(row=row, column=col).font = Font(name=\"微软雅黑\", size=11)\n",
    "\n",
    "    def map_values(report_data):\n",
    "        map_order_type = {\n",
    "            'balance': '钱包',\n",
    "            'baoyang': '保养',\n",
    "            'coffee': '星巴克',\n",
    "            'daijia': '代驾',\n",
    "            'dianying': '电影',\n",
    "            'huafei': '话费',\n",
    "            'huoche': '火车',\n",
    "            'jiadianqingxi': '家电清洗',\n",
    "            'jiadianweixiu': '家电维修',\n",
    "            'jiayouka': '加油卡',\n",
    "            'jipiao': '机票',\n",
    "            'jiudian': '酒店',\n",
    "            'liuliang': '流量',\n",
    "            'menpiao': '门票',\n",
    "            'paotui': '跑腿',\n",
    "            'piaowu': '票务',\n",
    "            'sdm': '水电煤',\n",
    "            'shenghuojiaofei': '生活缴费',\n",
    "            'shengxian': '生鲜',\n",
    "            'waimai': '外卖',\n",
    "            'xianhua': '鲜花',\n",
    "            'xihu': '洗护',\n",
    "            'zhuanche': '专车',\n",
    "            'weizhang': '违章缴费'\n",
    "        }\n",
    "        map_order_channel = {\n",
    "            'ele': '饿了么',\n",
    "            'tieyou': '铁友',\n",
    "            'dhst': '大汉三通',\n",
    "            'zhenlv': '真旅',\n",
    "            'ofpay': '欧飞',\n",
    "            'balance': '菠萝觅',\n",
    "            'linqu': '邻趣',\n",
    "            'e': 'e代驾',\n",
    "            'fft': '付费通',\n",
    "            'sfdj': '十分到家',\n",
    "            'elong': '艺龙',\n",
    "            'tidy': '泰迪',\n",
    "            'ai': '爱代驾',\n",
    "            'ctrip': '携程',\n",
    "            'lvmama': '驴妈妈',\n",
    "            'tongcheng': '同程',\n",
    "            'gaoyang': '高阳',\n",
    "            'qunar': '去哪儿',\n",
    "            'qunar_baitour': '去哪儿-百拓',\n",
    "            'yiguo': '易果',\n",
    "            'zmn': '啄木鸟',\n",
    "            'didi': '滴滴',\n",
    "            'yidao': '易到',\n",
    "            'dsby': '大师保养',\n",
    "            'chinapay': '银联',\n",
    "            'kou': '抠电影',\n",
    "            'zzw': '蜘蛛网',\n",
    "            'xishiqu': '西十区',\n",
    "            'diandian': '典典养车',\n",
    "            'carlife': '车生活'\n",
    "        }\n",
    "        map_pay_channel = {\n",
    "            'wx': '微信',\n",
    "            'alipay': '支付宝',\n",
    "            'alipay_wap':'支付宝_wap',\n",
    "            'balance': '菠萝觅',\n",
    "            'chinapay': '银联',\n",
    "            'ccb': '建行',\n",
    "            'bosc': '上行',\n",
    "            'icbc':'工行',\n",
    "        }\n",
    "        map_app_code = {\n",
    "            'boluome': '菠萝觅',\n",
    "            'fft': '付费通',\n",
    "            'allinpay': '通联钱包',\n",
    "            'jst': '聚事通',\n",
    "            'roobo': 'Roobo智能生活',\n",
    "            'chubao': '触宝电话',\n",
    "            'jhdp': '聚浩大屏',\n",
    "            '91jincai': '91金彩',\n",
    "            'mybosc': '上行快线',\n",
    "            '91ala': '51返呗',\n",
    "            'scity': '市民服务'\n",
    "        }\n",
    "\n",
    "        report_data['appCode'] = map_app_code[report_data['appCode']]\n",
    "        report_data['orderType'] = map_order_type[report_data['orderType']]\n",
    "\n",
    "#         report_data['payChannel'] = ''\n",
    "        pay_channel = report_data.get('payChannel', '')\n",
    "        if ',' in pay_channel:\n",
    "            report_data['payChannel'] = ''\n",
    "            for key in pay_channel.split(','):\n",
    "                report_data['payChannel'] += map_pay_channel[key] + ','\n",
    "            report_data['payChannel'] = report_data['payChannel'][:-1]\n",
    "        elif pay_channel:\n",
    "            report_data['payChannel'] = map_pay_channel[pay_channel]\n",
    "\n",
    "        report_data['orderChannel'] = map_order_channel[report_data['orderChannel'].lower()]\n",
    "        return report_data\n",
    "\n",
    "    def map_keys(report_data):\n",
    "        map_key = {\n",
    "            'appCode': '应用名称',\n",
    "            'orderId': '订单号',\n",
    "            'orderType': '品类',\n",
    "            'orderChannel': '供应商',\n",
    "            'partnerId': '供应商订单号',\n",
    "            'orderPhone': '手机号',\n",
    "            'userId': '用户ID',\n",
    "            'orderName': '订单名称',\n",
    "            'orderPrice': '订单金额',\n",
    "            'payPrice': '支付金额',\n",
    "            'deductionPrice': '优惠金额',\n",
    "            'orderStatus': '订单状态',\n",
    "            'payChannel': '支付方式',\n",
    "            'orderTime': '下单时间',\n",
    "            'paidTime': '支付时间',\n",
    "            'payId': '支付订单号',\n",
    "        }\n",
    "        report_data = {\n",
    "            map_key[k]: v\n",
    "            for k, v in report_data.items()\n",
    "            if k in map_key}\n",
    "        return report_data\n",
    "\n",
    "    for item in reports_data:\n",
    "        item = map_values(item)\n",
    "        item = map_keys(item)\n",
    "#         pprint(item['支付金额'])\n",
    "        row = ws.max_row + 1\n",
    "        for col in range(1, ws.max_column + 1):\n",
    "            ws.cell(row=row, column=col).value = item.get(ws.cell(row=1, column=col).value)\n",
    "            ws.cell(row=row, column=7).value = \"=E{0}-SUMPRODUCT((A:A=A{0})*1,F:F)\".format(row)\n",
    "    render_report(ws)\n",
    "    wb.save(out_path)\n",
    "\n",
    "    return"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "def prepare_transaction_data(mdb, rdb_1, rdb_2, app_code, start, end):\n",
    "    \"\"\"参数验证\"\"\"\n",
    "    try:\n",
    "        start = start.split('-')\n",
    "        end = end.split('-')\n",
    "        start_time = time.mktime((int(start[0]), int(start[1]), int(start[2]), 0, 0, 0, 0, 0, 0)) * 1000\n",
    "        end_time = time.mktime((int(end[0]), int(end[1]), int(end[2]), 24, 0, 0, 0, 0, 0)) * 1000\n",
    "    except ValueError as e:\n",
    "        print('时间格式错误!')\n",
    "        print('请输入如下格式的时间%Y-%m-%d，如2017-01-01')\n",
    "        return\n",
    "\n",
    "    if end_time > time.time() * 1000:\n",
    "        return\n",
    "\n",
    "    rst = mdb['order_lite_list'].find(\n",
    "        {'appCode': app_code,\n",
    "         'createdAt': {'$gte': start_time, '$lt': end_time}},\n",
    "        projection={'_id': 0}\n",
    "    )\n",
    "\n",
    "    if not rst:\n",
    "        return\n",
    "\n",
    "    data = []\n",
    "    for item in rst:\n",
    "        order_type = item['orderType']\n",
    "        order_id = item['id']\n",
    "        order_detail = mdb['order_{}'.format(order_type)].find_one({'id': order_id})\n",
    "        if not order_detail:\n",
    "            continue\n",
    "        order_channel = item['channel']\n",
    "        order_phone = order_detail.get('phone')\n",
    "        user_id = item['userId']\n",
    "        order_name = item['name']\n",
    "        partner_id = order_detail['partnerId']\n",
    "        order_time = get_datetime_from_microsecond(item['createdAt'])\n",
    "        order_status = item['displayStatus']\n",
    "        status = item['status']\n",
    "        order_price = order_detail['orderPrice']\n",
    "        price = order_detail['price']\n",
    "        deduction_price = float(order_price) - float(price)\n",
    "        paid_list = list(set(order_detail.get('paidList', [])))\n",
    "        paid_list = [v for v in paid_list if v]\n",
    "        paid_list.sort()\n",
    "#         print(paid_list)\n",
    "        if not paid_list:\n",
    "            paid_list = [order_id]\n",
    "        else:\n",
    "            print(paid_list)\n",
    "\n",
    "        for paid_id in paid_list:\n",
    "            data.append(\n",
    "                {\n",
    "                    'orderType': order_type,\n",
    "                    'orderId': order_id,\n",
    "                    'orderChannel': order_channel,\n",
    "                    'orderPhone': order_phone,\n",
    "                    'userId': user_id,\n",
    "                    'orderName': order_name,\n",
    "                    'orderTime': order_time,\n",
    "                    'orderStatus': order_status,\n",
    "                    'status': status,\n",
    "                    'partnerId': partner_id,\n",
    "                    'appCode': app_code,\n",
    "                    'orderPrice': order_price,\n",
    "                    'price': price,\n",
    "                    'deductionPrice':  deduction_price,\n",
    "                    'paidId': paid_id,\n",
    "                }\n",
    "            )\n",
    "\n",
    "    report_data = []\n",
    "    for item in data:\n",
    "        # redis 数据库获取缺失订单价格数据字段，1为完成订单，2为退款订单\n",
    "        payment_data = rdb_1.hgetall('p:{0}:{1}'.format(item['appCode'],\n",
    "                                                        item['paidId']))\n",
    "        refund_data = rdb_2.hgetall('r:{0}:{1}'.format(item['appCode'],\n",
    "                                                       item['paidId']))\n",
    "\n",
    "        status = item['status']\n",
    "        pay_price = None\n",
    "        \n",
    "        if payment_data.get('status', '-1') in ['2', '3']:\n",
    "            pay_id = payment_data.get('serialNum', '')\n",
    "            pay_channel = payment_data.get('channel', '')\n",
    "\n",
    "            paid_time = payment_data.get('paidAt')\n",
    "            if paid_time:\n",
    "                paid_time = get_datetime_from_microsecond(float(paid_time))\n",
    "\n",
    "            pay_price = payment_data.get('payPrice')\n",
    "            if pay_price:\n",
    "                pay_price = float(pay_price) / 100\n",
    "\n",
    "            item['payId'] = pay_id\n",
    "            item['payChannel'] = pay_channel\n",
    "            item['paidTime'] = paid_time\n",
    "            item['payPrice'] = pay_price\n",
    "            item['orderName'] = payment_data['name'] if payment_data.get('name') else item['orderName']\n",
    "\n",
    "        elif status == 7:\n",
    "            refunded_time = refund_data.get('createdAt')\n",
    "            if refunded_time:\n",
    "                refunded_time = get_datetime_from_microsecond(float(refunded_time))\n",
    "\n",
    "            refunded_price = refund_data.get('refundedPrice')\n",
    "            if refunded_price:\n",
    "                refunded_price = float(refunded_price) / 100\n",
    "\n",
    "            item['refundedTime'] = refunded_time\n",
    "            item['refundedPrice'] = refunded_price\n",
    "\n",
    "        report_data.append(item)\n",
    "\n",
    "    return report_data\n",
    "def get_datetime_from_microsecond(timestamp):\n",
    "    return time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(timestamp / 1000))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['10000039719200']\n",
      "['10000039717501']\n",
      "['10000039683900', '10000039683901']\n",
      "['10000039683301']\n",
      "['10000039681100']\n",
      "['10000039668600']\n"
     ]
    }
   ],
   "source": [
    "if __name__==\"__main__\":\n",
    "    app_code='boluome'\n",
    "    start_date='2017-01-01'\n",
    "    end_date='2017-03-22'\n",
    "    reports_data = prepare_transaction_data(r.mdb,\n",
    "                                                r.rdb_1,\n",
    "                                                r.rdb_2,\n",
    "                                                app_code,\n",
    "                                                start_date,\n",
    "                                                end_date)\n",
    "\n",
    "#     pprint(reports_data)\n",
    "    field_headers = ['订单号', '品类', '供应商', '订单名称', '订单金额', '支付金额',\n",
    "                     '优惠金额', '订单状态', '支付方式', '下单时间', '支付时间', '支付订单号']\n",
    "\n",
    "    generate_transaction_report(reports_data,\n",
    "                                field_headers,\n",
    "                                \"交易明细报表.xlsx\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{}"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r.rdb_1.hgetall('p:{0}:{1}'.format('boluome','100000397197'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{}"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r.rdb_1.hgetall('p:boluome:100000397197')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['10000039719200', '10000039719201', '10000039719202']"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a={'a':[ \n",
    "        \"10000039719200\", \n",
    "        \"10000039719200\",\n",
    "    \"10000039719201\",\n",
    "    \"10000039719202\"\n",
    "    ]\n",
    "}\n",
    "b=(list(set(a.get('a',[])+['10000039719201'])))\n",
    "b.sort()\n",
    "b\n",
    "# b=a.get('a',[])+['222']\n",
    "# b"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
