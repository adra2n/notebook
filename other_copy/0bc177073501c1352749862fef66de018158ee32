{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "import psycopg2\n",
    "import conf\n",
    "import re\n",
    "import random\n",
    "conn = psycopg2.connect(conf.PG_ACCOUNT)\n",
    "cur = conn.cursor()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ok\n"
     ]
    }
   ],
   "source": [
    "def ssss():\n",
    "    with psycopg2.connect(conf.PG_BOLUOME) as conn:\n",
    "        with conn.cursor() as curs:\n",
    "            curs.execute(\"SELECT * FROM jjll\")\n",
    "try:\n",
    "\n",
    "            ssss()\n",
    "except psycopg2.ProgrammingError:\n",
    "    print('ok')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 378,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "class PostgreSql():\n",
    "    def __init__(self,sql,datas):\n",
    "        self.sql=sql\n",
    "        self.datas=datas\n",
    "    def insert_sql_parse(sql):\n",
    "        pattern=re.compile(\"\\(.+?\\)\")\n",
    "        r=re.findall(pattern,sql)\n",
    "        r[0]=r[0].replace('(','')\n",
    "        r[0]=r[0].replace(')','')\n",
    "        keys=r[0].split(',')\n",
    "        assert len(keys)==len(r[1].split(','))\n",
    "        return keys"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 386,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "def insert_sql_parse(sql):\n",
    "    pattern=re.compile(\"\\(.+?\\)\")\n",
    "    r=re.findall(pattern,sql)\n",
    "    r[0]=r[0].replace('(','')\n",
    "    r[0]=r[0].replace(')','')\n",
    "    r[0]=r[0].replace(' ','')\n",
    "    keys=r[0].split(',')\n",
    "    assert len(keys)==len(r[1].split(','))\n",
    "    return keys"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 409,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['order_id',\n",
       " 'price',\n",
       " 'pay_price',\n",
       " 'channel',\n",
       " 'user_id',\n",
       " 'charge_id',\n",
       " 'created_at',\n",
       " 'order_type',\n",
       " 'status',\n",
       " 'serial_num',\n",
       " 'app_code',\n",
       " 'id']"
      ]
     },
     "execution_count": 409,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sql = (\"INSERT INTO pay(  \"\n",
    "       \"order_id, price,pay_price, channel, user_id, charge_id, created_at,\"\n",
    "       \"order_type, status, serial_num, app_code, id) \"\n",
    "       \"VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s);\")\n",
    "insert_sql_parse(sql)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 380,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "def pg_insert(sql,datas):\n",
    "    \"\"\"sql为str,datas为list[{},{}]\"\"\"\n",
    "    assert isinstance(sql,str)\n",
    "    assert isinstance(datas,list)\n",
    "    assert \";\" in sql\n",
    "    keys=insert_sql_parse(sql)\n",
    "    \n",
    "    with psycopg2.connect(conf.PG_ACCOUNT) as conn:\n",
    "        with conn.cursor() as curs:\n",
    "            sql_pg=\"\"\n",
    "            for item in datas:\n",
    "                value=[item.get(k) for k in keys]\n",
    "                sql_pg+=curs.mogrify(sql,value).decode()\n",
    "            curs.execute(sql_pg)\n",
    "    return "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 279,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'acjg'"
      ]
     },
     "execution_count": 279,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "''.join(random.sample(\"qwertyuioplkjhgfdsazxcvbnm\",4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 410,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "num_ac=random.randint(10,100000)\n",
    "type_ac=random.randint(1,2)\n",
    "quota=round(random.random()*1000,2)\n",
    "freeze=round(random.random()*100,2)\n",
    "customer=''.join(random.sample(\"qwertyuioplkjhgfdsazxcvbnm\",4))\n",
    "datas=[{\n",
    "    'account':num_ac,\n",
    "    'account_type':type_ac,\n",
    "    'user_id':'user{}'.format(num_ac),\n",
    "    'customer':customer,\n",
    "    'quota':quota,\n",
    "    'freeze_quota':freeze\n",
    "}]\n",
    "sql=\"INSERT INTO user_settlement_account ( account, account_type,user_id,customer,quota,freeze_quota) VALUES (%s,%s,%s,%s,%s,%s);\"\n",
    "pg_insert(sql,datas)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "a=(\"INSERT INTO transaction_amount_daily\"\n",
    "                     \"(id, check_date, category, app_id, app_code) \"\n",
    "                     \"VALUES \"\n",
    "                     \"(%s, %s, %s, %s, %s);\")\n",
    "keys=sql_parse(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 368,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['account_type', 'user_id', 'customer', 'quota', 'freeze_quota', 'account']"
      ]
     },
     "execution_count": 368,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sql_list=sql.split(' ')\n",
    "sql_list=[v for v in sql_list if '%s' in v]\n",
    "sql_clean=''.join(sql_list)\n",
    "sql_clean=sql_clean.replace(';','')\n",
    "sql_clean=sql_clean.replace('=%s',',')\n",
    "keys=[v for v in sql_clean.split(',') if v]\n",
    "keys\n",
    "# pattern=re.compile(\"SET.*?=%s\")\n",
    "# r=re.findall(pattern,sql)\n",
    "# r"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 370,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "def update_sql_parse(sql):\n",
    "    sql_list=sql.split(' ')\n",
    "    sql_list=[v for v in sql_list if '%s' in v]\n",
    "    sql_clean=''.join(sql_list)\n",
    "    sql_clean=sql_clean.replace(';','')\n",
    "    sql_clean=sql_clean.replace('=%s',',')\n",
    "    keys=[v for v in sql_clean.split(',') if v]\n",
    "    assert len(keys)>1\n",
    "    return keys"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 373,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "def pg_update(sql,datas):\n",
    "    \"\"\"sql为str,datas为list[{},{}]\"\"\"\n",
    "    assert isinstance(sql,str)\n",
    "    assert isinstance(datas,list)\n",
    "    assert \";\" in sql\n",
    "    keys=update_sql_parse(sql)\n",
    "    \n",
    "    with psycopg2.connect(conf.PG_ACCOUNT) as conn:\n",
    "        with conn.cursor() as curs:\n",
    "            sql_pg=\"\"\n",
    "            for item in datas:\n",
    "                value=[item.get(k) for k in keys]\n",
    "                sql_pg+=curs.mogrify(sql,value).decode()\n",
    "            curs.execute(sql_pg)\n",
    "    return "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 377,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[{'account': 87704, 'account_type': 2, 'user_id': 'user24283', 'customer': 'topg', 'quota': 356.0, 'freeze_quota': 10.86}]\n"
     ]
    }
   ],
   "source": [
    "num_ac=random.randint(10,100000)\n",
    "type_ac=random.randint(1,2)\n",
    "quota=round(random.random()*1000,2)\n",
    "freeze=round(random.random()*100,2)\n",
    "customer=''.join(random.sample(\"qwertyuioplkjhgfdsazxcvbnm\",4))\n",
    "sql=(\"UPDATE user_settlement_account \"\n",
    "    \"SET account_type=%s, user_id=%s, customer=%s, quota=%s, freeze_quota=%s \"\n",
    "    \"WHERE account=%s;\")\n",
    "datas=[{\n",
    "    'account':87704,\n",
    "    'account_type':type_ac,\n",
    "    'user_id':'user{}'.format(num_ac),\n",
    "    'customer':customer,\n",
    "    'quota':quota,\n",
    "    'freeze_quota':freeze\n",
    "}]\n",
    "print(datas)\n",
    "pg_update(sql,datas)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 337,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'UPDATE user_settlement_account SET account_type=%s,user_id=%s, customer=%s, quota=%s, freeze_quota=%s WHERE account=%s;'"
      ]
     },
     "execution_count": 337,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sql.split(' ')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 421,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'UPDATE pay SET user_id=%s,price=%s,pay_price=%s WHERE id=%s;'"
      ]
     },
     "execution_count": 421,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pg_data={\n",
    "    'account':87704,\n",
    "    'account_type':type_ac,\n",
    "    'user_id':'user{}'.format(num_ac),\n",
    "    'customer':customer,\n",
    "    'price':quota,\n",
    "    'pay_price':freeze\n",
    "}\n",
    "keys_list = ['order_id', 'price', 'pay_price', 'channel', 'user_id', 'charge_id',\n",
    "             'created_at', 'order_type', 'status', 'serial_num', 'app_code', 'id']\n",
    "keys = [k for k in pg_data if k in keys_list]\n",
    "sql_set = '=%s,'.join(keys)\n",
    "sql_set+='=%s'\n",
    "\n",
    "sql = \"UPDATE pay SET {} WHERE id=%s;\".format(sql_set)\n",
    "sql"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 422,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['user_id', 'price', 'pay_price']"
      ]
     },
     "execution_count": 422,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "keys"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 423,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'INSERT INTO pay (user_id,price,pay_price) VALUES (%s,%s,%s);'"
      ]
     },
     "execution_count": 423,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sql_set = ','.join(keys)\n",
    "s = ','.join(['%s' for i in range(len(keys))])\n",
    "sql = \"INSERT INTO pay ({}) VALUES ({});\".format(sql_set, s)\n",
    "sql"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
