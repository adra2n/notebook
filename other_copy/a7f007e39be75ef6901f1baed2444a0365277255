{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "from __future__ import absolute_import, unicode_literals\n",
    "\n",
    "import time\n",
    "from datetime import datetime\n",
    "\n",
    "import psycopg2\n",
    "import redis\n",
    "from celery import Celery, Task, platforms\n",
    "from pymongo import MongoClient\n",
    "from pprint import pprint\n",
    "import conf\n",
    "\n",
    "\n",
    "class PreReportTask():\n",
    "    abstract = True\n",
    "    _rdb = None\n",
    "    _mdb = None\n",
    "    _pgconn = None\n",
    "\n",
    "    @property\n",
    "    def rdb(self):\n",
    "        if self._rdb is None:\n",
    "            self._rdb = redis.StrictRedis(\n",
    "                host=conf.REDIS_ACTIVITY_HOST,\n",
    "                port=conf.REDIS_ACTIVITY_PORT,\n",
    "                db=conf.REDIS_ACTIVITY_DB)\n",
    "        return self._rdb\n",
    "\n",
    "    @property\n",
    "    def mdb(self):\n",
    "        if self._mdb is None:\n",
    "            _mc = MongoClient(conf.MONGO_HOST, replicaset=conf.REPLICASET_NAME)\n",
    "            self._mdb = _mc['boluome']\n",
    "        return self._mdb\n",
    "self=PreReportTask()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.00\n"
     ]
    }
   ],
   "source": [
    "conn = psycopg2.connect(conf.PG_DSN)\n",
    "cur = conn.cursor()\n",
    "cur.execute(\"\"\"SELECT amount_hourly,number_of_completed_orders_hourly FROM transaction_amount_daily WHERE id='blm-huafei_ofpay-2017-04-18'\"\"\")\n",
    "data=cur.fetchone()[0]\n",
    "print(sum(data))\n",
    "# for item in cur :\n",
    "#     print(item)\n",
    "# #     print(sum(item[0]))\n",
    "#     break"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 213,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'amount': Decimal('0.00'),\n",
      " 'amount_hourly': [Decimal('0.00'),\n",
      "                   Decimal('0.00'),\n",
      "                   Decimal('0.00'),\n",
      "                   Decimal('0.00'),\n",
      "                   Decimal('0.00'),\n",
      "                   Decimal('0.00'),\n",
      "                   Decimal('0.00'),\n",
      "                   Decimal('0.00'),\n",
      "                   Decimal('0.00'),\n",
      "                   Decimal('0.00'),\n",
      "                   Decimal('0.00'),\n",
      "                   Decimal('0.00'),\n",
      "                   Decimal('0.00'),\n",
      "                   Decimal('0.00'),\n",
      "                   Decimal('0.00'),\n",
      "                   Decimal('0.00'),\n",
      "                   Decimal('0.00'),\n",
      "                   Decimal('0.00'),\n",
      "                   Decimal('0.00'),\n",
      "                   Decimal('0.00'),\n",
      "                   Decimal('0.00'),\n",
      "                   Decimal('0.00'),\n",
      "                   Decimal('0.00'),\n",
      "                   Decimal('0.00')],\n",
      " 'app_code': 'boluome',\n",
      " 'app_id': 100,\n",
      " 'category': 'menpiao_lvmama',\n",
      " 'check_date': datetime.date(2017, 3, 15),\n",
      " 'ctime': datetime.datetime(2017, 3, 16, 1, 27, 54, 529292),\n",
      " 'id': 'boluome-menpiao_lvmama-2017-03-15',\n",
      " 'mtime': datetime.datetime(2017, 3, 16, 1, 27, 54, 529292),\n",
      " 'number_of_completed_orders': 0,\n",
      " 'number_of_completed_orders_hourly': [0,\n",
      "                                       0,\n",
      "                                       0,\n",
      "                                       0,\n",
      "                                       0,\n",
      "                                       0,\n",
      "                                       0,\n",
      "                                       0,\n",
      "                                       0,\n",
      "                                       0,\n",
      "                                       0,\n",
      "                                       0,\n",
      "                                       0,\n",
      "                                       0,\n",
      "                                       0,\n",
      "                                       0,\n",
      "                                       0,\n",
      "                                       0,\n",
      "                                       0,\n",
      "                                       0,\n",
      "                                       0,\n",
      "                                       0,\n",
      "                                       0,\n",
      "                                       0],\n",
      " 'number_of_orders': 0}\n"
     ]
    }
   ],
   "source": [
    "def pg_select():\n",
    "    conn = psycopg2.connect(conf.PG_DSN)\n",
    "    cur = conn.cursor()\n",
    "    cur.execute(\"\"\"SELECT * FROM transaction_amount_daily WHERE id='boluome-menpiao_lvmama-2017-03-15'\"\"\")\n",
    "    data=cur.fetchall()[0]\n",
    "#     print(data)\n",
    "    pprint({v[0]:data[k] for k,v in enumerate(cur.description)})\n",
    "pg_select()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[('1231453252',)]\n"
     ]
    }
   ],
   "source": [
    "conn = psycopg2.connect(conf.PG_ACCOUNT)\n",
    "cur = conn.cursor()\n",
    "cur.execute(\"\"\"SELECT flow_id FROM boluome_flow WHERE flow_id='1231453252'\"\"\")\n",
    "data=cur.fetchall()\n",
    "print(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'account': '112',\n",
       "  'channel': 1,\n",
       "  'created_at': 1.1,\n",
       "  'fee': 2.2,\n",
       "  'fee_rate': 3.3,\n",
       "  'flow_id': '1231453252',\n",
       "  'order_amount': 4.4,\n",
       "  'order_id': '2113',\n",
       "  'order_name': 'test',\n",
       "  'paid_at': 1.1,\n",
       "  'payment_amount': 4.4,\n",
       "  'status': 1,\n",
       "  'supplier': 'tset',\n",
       "  'transaction_no': 'test',\n",
       "  'type': 2,\n",
       "  'user_id': 'userid'}]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def pg_select(sql):\n",
    "    \"\"\"\n",
    "    封装PostgreSql语句之 SELECT\n",
    "    Args:\n",
    "        sql(str):\n",
    "    Returns:\n",
    "        out: list of tuples\n",
    "\n",
    "    >>> datas=pg_select('SELECT key FROM boluome_settlement')\n",
    "    \"\"\"\n",
    "    assert isinstance(sql, str)\n",
    "    assert \";\" in sql\n",
    "    with psycopg2.connect(conf.PG_ACCOUNT) as conn:\n",
    "        with conn.cursor() as curs:\n",
    "            curs.execute(sql)\n",
    "            keys = curs.description\n",
    "            data_all = curs.fetchall()\n",
    "    data = []\n",
    "    for item in data_all:\n",
    "        data.append({v[0]: item[k] for k, v in enumerate(keys)})\n",
    "    return data\n",
    "pg_select(\"SELECT * FROM boluome_flow WHERE flow_id='1231453252';\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "boluome\n",
      "[{'_id': ObjectId('58eb535db495ef398334eae4'),\n",
      "  'appCode': 'boluome',\n",
      "  'channel': 'zmn',\n",
      "  'createdAt': 1491817309064.0,\n",
      "  'customerId': '209',\n",
      "  'customerUserId': 'test_long',\n",
      "  'displayStatus': '已取消',\n",
      "  'id': '100000399040',\n",
      "  'name': '电视机保养维修',\n",
      "  'orderType': 'jiadianweixiu',\n",
      "  'price': 30,\n",
      "  'status': 8,\n",
      "  'updatedAt': 1491817309064.0,\n",
      "  'userId': 'test_long',\n",
      "  'userPhone': '13512119091'},\n",
      " {'_id': ObjectId('58eb55f7b495ef398334eae6'),\n",
      "  'appCode': 'boluome',\n",
      "  'channel': 'tidy',\n",
      "  'createdAt': 1491817975568.0,\n",
      "  'customerId': 209,\n",
      "  'customerUserId': 'blm_3rego9v',\n",
      "  'displayStatus': '异常',\n",
      "  'id': '100000399041',\n",
      "  'name': '精选单品包月花',\n",
      "  'orderType': 'xianhua',\n",
      "  'price': 568,\n",
      "  'status': 0,\n",
      "  'updatedAt': 1491817975568.0,\n",
      "  'userId': 'blm_3rego9v',\n",
      "  'userPhone': '13812345678'}]\n",
      "{'all': {'amount': 0, 'number': 0, 'number_completed': 0}}\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "\"UPDATE transaction_amount_daily SET amount_hourly[18]=0,number_of_completed_orders_hourly[18]=0, mtime='2017-04-10T18:40:15.107906'::timestamp WHERE id='boluome-all-2017-04-10';\""
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def data_preprocessing(mdb_data):\n",
    "    insert_data = {'all': {'amount': 0, 'number': 0, 'number_completed': 0}}\n",
    "    for item in mdb_data:\n",
    "        key = \"{}_{}\".format(item['orderType'], item['channel'])\n",
    "        insert_data.setdefault(key, {})\n",
    "        insert_data[key].setdefault('amount', 0)\n",
    "        price = item['price'] if item['status'] in [4] else 0\n",
    "        insert_data[key]['amount'] += price\n",
    "        insert_data['all']['amount'] += price\n",
    "        insert_data[key].setdefault('number', 0)\n",
    "        insert_data[key]['number'] += 1\n",
    "        insert_data['all']['number'] += 1\n",
    "        insert_data[key].setdefault('number_completed', 0)\n",
    "        number_completed = 1 if item['status'] in [4] else 0\n",
    "        insert_data[key]['number_completed'] += number_completed\n",
    "        insert_data['all']['number_completed'] += number_completed\n",
    "    return insert_data\n",
    "def hourly_update(app_code):\n",
    "    \"\"\"1-24每小时执行一次\"\"\"\n",
    "    conn = psycopg2.connect(conf.PG_DSN)\n",
    "    cur = conn.cursor()\n",
    "    now_time = time.time()\n",
    "    day_time = time.strftime('%Y-%m-%d', time.localtime(time.time() - 60 * 30))\n",
    "    hour = time.strftime('%H', time.localtime(time.time() - 60 * 30))\n",
    "    print(app_code)\n",
    "    mdb_data = self.mdb.order_lite_list.aggregate([\n",
    "        {'$match': {'appCode': app_code}},\n",
    "        {'$match': {'$or': [{'createdAt': {'$gte': (now_time - 60 * 60) * 1000, '$lt': now_time * 1000}},\n",
    "                            {'completedAt': {'$gte': (now_time - 60 * 60) * 1000, '$lt': now_time * 1000}}\n",
    "                            ]\n",
    "                    }\n",
    "         }\n",
    "    ])\n",
    "    pprint([k for k in mdb_data])\n",
    "    insert_data = data_preprocessing(mdb_data)\n",
    "    print(insert_data)\n",
    "    sql_update = ''\n",
    "    for key, value in insert_data.items():\n",
    "        sql_update += cur.mogrify(\n",
    "            (\"UPDATE \"\n",
    "             \"transaction_amount_daily \"\n",
    "             \"SET \"\n",
    "             \"amount_hourly[%s]=%s,\"\n",
    "             \"number_of_completed_orders_hourly[%s]=%s, mtime=%s \"\n",
    "             \"WHERE id=%s;\"),\n",
    "            (int(hour),\n",
    "             value['amount'],\n",
    "             int(hour),\n",
    "             value['number_completed'],\n",
    "             datetime.now(),\n",
    "             '-'.join([app_code, key, day_time]))).decode()\n",
    "    return sql_update\n",
    "\n",
    "hourly_update('boluome')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-25-2c16ce616cad>, line 3)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-25-2c16ce616cad>\"\u001b[0;36m, line \u001b[0;32m3\u001b[0m\n\u001b[0;31m    '$or':['$match': {'createdAt': {\u001b[0m\n\u001b[0m                   ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "self.mdb.order_lite_list.aggregate({\n",
    "#     'appCode': app_code,\n",
    "    '$or':['$match': {'createdAt': {\n",
    "            '$gte': (now_time - 60 * 60 * 24) * 1000,\n",
    "            '$lt': now_time * 1000}}]\n",
    "    })\n",
    "# { $or: [ $match : { author : \"dave\" }, $match : { author : \"john\" }] }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'_id': ObjectId('58eb05e3b495ef398334e9ca'), 'id': '100000398891', 'name': '老上海馄饨铺（科苑店）', 'orderType': 'waimai', 'price': 30, 'userId': '4238', 'status': 8, 'displayStatus': '已取消', 'channel': 'ele', 'userPhone': '18979608002', 'appCode': 'zuwoojia', 'customerId': '270', 'customerUserId': '4238', 'createdAt': 1491797475994.0, 'updatedAt': 1491797475994.0}\n",
      "{'_id': ObjectId('58eb535db495ef398334eae4'), 'id': '100000399040', 'name': '电视机保养维修', 'orderType': 'jiadianweixiu', 'price': 30, 'userId': 'test_long', 'status': 2, 'displayStatus': '待支付', 'channel': 'zmn', 'userPhone': '13512119091', 'appCode': 'boluome', 'customerId': '209', 'customerUserId': 'test_long', 'createdAt': 1491817309064.0, 'updatedAt': 1491817309064.0}\n"
     ]
    }
   ],
   "source": [
    "import time \n",
    "for item in self.mdb.order_lite_list.aggregate([\n",
    "    { '$match':{'price': 30}},\n",
    "    { '$match': { '$or': [{'createdAt': {'$gte': (time.time() - 60 * 60 * 24) * 1000,'$lt': time.time() * 1000}}, \n",
    "                          {'createdAt': {'$gte': (time.time() - 60 * 60 * 24) * 1000,'$lt': time.time() * 1000}} \n",
    "                         ] \n",
    "                } \n",
    "    }\n",
    "]):\n",
    "    print(item)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
