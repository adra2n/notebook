{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 229,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "import records\n",
    "import json\n",
    "from pprint import pprint\n",
    "import conf\n",
    "from datetime import datetime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 248,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "db=records.Database('postgresql+psycopg2://pguser:Boluome123@192.168.1.13/oto_saas')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 313,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "rows=db.query(\"SELECT * from transaction_amount_daily WHERE id='pingan-one-all-2017-05-24'\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 304,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<RecordCollection size=0 pending=True>"
      ]
     },
     "execution_count": 304,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "db.query(\"UPDATE transaction_amount_daily SET amount_hourly[17]=648.7,number_of_completed_orders_hourly[17]=3 WHERE id='pingan-one-all-2017-05-24'\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 312,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 312,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rows.as_dict()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "connection='postgresql+psycopg2://root:Boluome123@192.168.0.8/account'\n",
    "db=records.Database(connection)\n",
    "rows=db.query(\"select * from boluome_flow\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "112\n"
     ]
    }
   ],
   "source": [
    "for i in rows:\n",
    "    print(i.account)\n",
    "    break"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "db.query(\"INSERT INTO boluome_flow (flow_id, status, channel, type, user_id, account, payment_amount, created_at, paid_at, order_id, order_name, fee, order_amount, fee_rate, transaction_no, supplier) VALUES (:flow_id, :status, :channel, :type, :user_id, :account, :payment_amount, :created_at, :paid_at, :order_id, :order_name, :fee, :order_amount, :fee_rate, :transaction_no, :supplier);\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'account': '112',\n",
      " 'channel': 1,\n",
      " 'created_at': 1.1,\n",
      " 'fee': 2.2,\n",
      " 'fee_rate': 3.3,\n",
      " 'flow_id': '1231453252',\n",
      " 'order_amount': 4.4,\n",
      " 'order_id': '2113',\n",
      " 'order_name': 'test',\n",
      " 'paid_at': 1.1,\n",
      " 'payment_amount': 4.4,\n",
      " 'status': 1,\n",
      " 'supplier': 'tset',\n",
      " 'transaction_no': 'test',\n",
      " 'type': 2,\n",
      " 'user_id': 'userid'}\n",
      "{'account': '112',\n",
      " 'channel': 1,\n",
      " 'created_at': 1.1,\n",
      " 'fee': 2.2,\n",
      " 'fee_rate': 3.3,\n",
      " 'flow_id': '12314532523',\n",
      " 'order_amount': 4.4,\n",
      " 'order_id': '2113',\n",
      " 'order_name': 'test',\n",
      " 'paid_at': 1.1,\n",
      " 'payment_amount': 4.4,\n",
      " 'status': 1,\n",
      " 'supplier': 'tset',\n",
      " 'transaction_no': 'test',\n",
      " 'type': 2,\n",
      " 'user_id': 'userid'}\n",
      "{'account': '181521367814898037_a',\n",
      " 'channel': 10,\n",
      " 'created_at': 1493801661720.0,\n",
      " 'fee': 0.0,\n",
      " 'fee_rate': 0.0,\n",
      " 'flow_id': '100000008714300',\n",
      " 'order_amount': 100.0,\n",
      " 'order_id': '1000000087143',\n",
      " 'order_name': '上海电信5M - 189****8858',\n",
      " 'paid_at': 1493801896198.0,\n",
      " 'payment_amount': 100.0,\n",
      " 'status': 4,\n",
      " 'supplier': 'dhst',\n",
      " 'transaction_no': 'test',\n",
      " 'type': 1,\n",
      " 'user_id': '181521367814898037'}\n",
      "{'account': '170213706903706_a',\n",
      " 'channel': 8,\n",
      " 'created_at': 1493776659960.0,\n",
      " 'fee': 0.0,\n",
      " 'fee_rate': 0.0,\n",
      " 'flow_id': '100000008711500',\n",
      " 'order_amount': 2400.0,\n",
      " 'order_id': '1000000087115',\n",
      " 'order_name': '陕西手工凉皮（河口河宁店）',\n",
      " 'paid_at': 1493776675640.0,\n",
      " 'payment_amount': 2400.0,\n",
      " 'status': 4,\n",
      " 'supplier': 'ele',\n",
      " 'transaction_no': 'test',\n",
      " 'type': 1,\n",
      " 'user_id': '170213706903706'}\n",
      "{'account': 'blm_joq6x1r_b',\n",
      " 'channel': 6,\n",
      " 'created_at': 1493772998906.0,\n",
      " 'fee': 0.0,\n",
      " 'fee_rate': 0.0,\n",
      " 'flow_id': '100000008711300',\n",
      " 'order_amount': 74000.0,\n",
      " 'order_id': '1000000087113',\n",
      " 'order_name': '上海 至 北京',\n",
      " 'paid_at': 1493773013112.0,\n",
      " 'payment_amount': 74000.0,\n",
      " 'status': 4,\n",
      " 'supplier': 'zhenlv',\n",
      " 'transaction_no': 'test',\n",
      " 'type': 1,\n",
      " 'user_id': 'blm_joq6x1r'}\n",
      "{'account': '73772_a',\n",
      " 'channel': 4,\n",
      " 'created_at': 1493782305770.0,\n",
      " 'fee': 0.0,\n",
      " 'fee_rate': 0.0,\n",
      " 'flow_id': '10000040114400',\n",
      " 'order_amount': 1000.0,\n",
      " 'order_id': '100000401144',\n",
      " 'order_name': '中石化卡:100****4771 充值 10.0元',\n",
      " 'paid_at': 1493782352242.0,\n",
      " 'payment_amount': 1000.0,\n",
      " 'status': 4,\n",
      " 'supplier': 'fanbei',\n",
      " 'transaction_no': 'dev_test',\n",
      " 'type': 1,\n",
      " 'user_id': '73772'}\n",
      "{'account': 'blm_ruiawqh_a',\n",
      " 'channel': 8,\n",
      " 'created_at': 1493709489104.0,\n",
      " 'fee': 0.0,\n",
      " 'fee_rate': 0.0,\n",
      " 'flow_id': '10000040108901',\n",
      " 'order_amount': 68800.0,\n",
      " 'order_id': '100000401089',\n",
      " 'order_name': '17130042737',\n",
      " 'paid_at': 1493709510134.0,\n",
      " 'payment_amount': 52400.0,\n",
      " 'status': 4,\n",
      " 'supplier': 'shenzhou',\n",
      " 'transaction_no': 'dev_test',\n",
      " 'type': 2,\n",
      " 'user_id': 'blm_ruiawqh'}\n",
      "{'account': 'blm_ruiawqh_a',\n",
      " 'channel': 8,\n",
      " 'created_at': 1493709401733.0,\n",
      " 'fee': 0.0,\n",
      " 'fee_rate': 0.0,\n",
      " 'flow_id': '10000040108900',\n",
      " 'order_amount': 16400.0,\n",
      " 'order_id': '100000401089',\n",
      " 'order_name': '上海虹桥国际机场2号航站楼-浦东国际机场',\n",
      " 'paid_at': 1493709406671.0,\n",
      " 'payment_amount': 16400.0,\n",
      " 'status': 4,\n",
      " 'supplier': 'shenzhou',\n",
      " 'transaction_no': 'dev_test',\n",
      " 'type': 1,\n",
      " 'user_id': 'blm_ruiawqh'}\n"
     ]
    }
   ],
   "source": [
    "data=json.loads(rows.export(\"json\"))\n",
    "for item in data:\n",
    "    pprint(item)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "a bytes-like object is required, not 'str'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-56-e380da936b3c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"report.json\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'wb'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m     \u001b[0mf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwrite\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjson\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdumps\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjson\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloads\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrows\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexport\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'json'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m: a bytes-like object is required, not 'str'"
     ]
    }
   ],
   "source": [
    "with open(\"report.json\",'wb') as f:\n",
    "    f.write(json.dumps(json.loads(rows.export('json'))))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'account': '112',\n",
       "  'channel': 1,\n",
       "  'created_at': 1.1,\n",
       "  'fee': 2.2,\n",
       "  'fee_rate': 3.3,\n",
       "  'flow_id': '1231453252',\n",
       "  'order_amount': 4.4,\n",
       "  'order_id': '2113',\n",
       "  'order_name': 'test',\n",
       "  'paid_at': 1.1,\n",
       "  'payment_amount': 4.4,\n",
       "  'status': 1,\n",
       "  'supplier': 'tset',\n",
       "  'transaction_no': 'test',\n",
       "  'type': 2,\n",
       "  'user_id': 'userid'},\n",
       " {'account': '112',\n",
       "  'channel': 1,\n",
       "  'created_at': 1.1,\n",
       "  'fee': 2.2,\n",
       "  'fee_rate': 3.3,\n",
       "  'flow_id': '12314532523',\n",
       "  'order_amount': 4.4,\n",
       "  'order_id': '2113',\n",
       "  'order_name': 'test',\n",
       "  'paid_at': 1.1,\n",
       "  'payment_amount': 4.4,\n",
       "  'status': 1,\n",
       "  'supplier': 'tset',\n",
       "  'transaction_no': 'test',\n",
       "  'type': 2,\n",
       "  'user_id': 'userid'},\n",
       " {'account': '181521367814898037_a',\n",
       "  'channel': 10,\n",
       "  'created_at': 1493801661720.0,\n",
       "  'fee': 0.0,\n",
       "  'fee_rate': 0.0,\n",
       "  'flow_id': '100000008714300',\n",
       "  'order_amount': 100.0,\n",
       "  'order_id': '1000000087143',\n",
       "  'order_name': '上海电信5M - 189****8858',\n",
       "  'paid_at': 1493801896198.0,\n",
       "  'payment_amount': 100.0,\n",
       "  'status': 4,\n",
       "  'supplier': 'dhst',\n",
       "  'transaction_no': 'test',\n",
       "  'type': 1,\n",
       "  'user_id': '181521367814898037'},\n",
       " {'account': '170213706903706_a',\n",
       "  'channel': 8,\n",
       "  'created_at': 1493776659960.0,\n",
       "  'fee': 0.0,\n",
       "  'fee_rate': 0.0,\n",
       "  'flow_id': '100000008711500',\n",
       "  'order_amount': 2400.0,\n",
       "  'order_id': '1000000087115',\n",
       "  'order_name': '陕西手工凉皮（河口河宁店）',\n",
       "  'paid_at': 1493776675640.0,\n",
       "  'payment_amount': 2400.0,\n",
       "  'status': 4,\n",
       "  'supplier': 'ele',\n",
       "  'transaction_no': 'test',\n",
       "  'type': 1,\n",
       "  'user_id': '170213706903706'},\n",
       " {'account': 'blm_joq6x1r_b',\n",
       "  'channel': 6,\n",
       "  'created_at': 1493772998906.0,\n",
       "  'fee': 0.0,\n",
       "  'fee_rate': 0.0,\n",
       "  'flow_id': '100000008711300',\n",
       "  'order_amount': 74000.0,\n",
       "  'order_id': '1000000087113',\n",
       "  'order_name': '上海 至 北京',\n",
       "  'paid_at': 1493773013112.0,\n",
       "  'payment_amount': 74000.0,\n",
       "  'status': 4,\n",
       "  'supplier': 'zhenlv',\n",
       "  'transaction_no': 'test',\n",
       "  'type': 1,\n",
       "  'user_id': 'blm_joq6x1r'},\n",
       " {'account': '73772_a',\n",
       "  'channel': 4,\n",
       "  'created_at': 1493782305770.0,\n",
       "  'fee': 0.0,\n",
       "  'fee_rate': 0.0,\n",
       "  'flow_id': '10000040114400',\n",
       "  'order_amount': 1000.0,\n",
       "  'order_id': '100000401144',\n",
       "  'order_name': '中石化卡:100****4771 充值 10.0元',\n",
       "  'paid_at': 1493782352242.0,\n",
       "  'payment_amount': 1000.0,\n",
       "  'status': 4,\n",
       "  'supplier': 'fanbei',\n",
       "  'transaction_no': 'dev_test',\n",
       "  'type': 1,\n",
       "  'user_id': '73772'},\n",
       " {'account': 'blm_ruiawqh_a',\n",
       "  'channel': 8,\n",
       "  'created_at': 1493709489104.0,\n",
       "  'fee': 0.0,\n",
       "  'fee_rate': 0.0,\n",
       "  'flow_id': '10000040108901',\n",
       "  'order_amount': 68800.0,\n",
       "  'order_id': '100000401089',\n",
       "  'order_name': '17130042737',\n",
       "  'paid_at': 1493709510134.0,\n",
       "  'payment_amount': 52400.0,\n",
       "  'status': 4,\n",
       "  'supplier': 'shenzhou',\n",
       "  'transaction_no': 'dev_test',\n",
       "  'type': 2,\n",
       "  'user_id': 'blm_ruiawqh'},\n",
       " {'account': 'blm_ruiawqh_a',\n",
       "  'channel': 8,\n",
       "  'created_at': 1493709401733.0,\n",
       "  'fee': 0.0,\n",
       "  'fee_rate': 0.0,\n",
       "  'flow_id': '10000040108900',\n",
       "  'order_amount': 16400.0,\n",
       "  'order_id': '100000401089',\n",
       "  'order_name': '上海虹桥国际机场2号航站楼-浦东国际机场',\n",
       "  'paid_at': 1493709406671.0,\n",
       "  'payment_amount': 16400.0,\n",
       "  'status': 4,\n",
       "  'supplier': 'shenzhou',\n",
       "  'transaction_no': 'dev_test',\n",
       "  'type': 1,\n",
       "  'user_id': 'blm_ruiawqh'}]"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "json.loads(rows.export('json'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "class C():\n",
    "    _value=2\n",
    "    @classmethod\n",
    "    def f(self):\n",
    "        return self._value"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "## 交易数据统计重构"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "connection='postgresql+psycopg2://root:Boluome123@192.168.0.8/oto_saas'\n",
    "db=records.Database(connection)\n",
    "rows=db.query(\"SELECT app_id,app_code FROM application\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Record {\"app_id\": 134, \"app_code\": \"fft\"}>"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rows[2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "db = records.Database('postgresql+psycopg2://root:Boluome123@192.168.0.8/oto_saas')\n",
    "rows = db.query(\"SELECT app_name,app_code FROM application\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'91ala': '51返呗',\n",
      " '91jincai': '91金彩',\n",
      " 'abchina': '农业银行',\n",
      " 'allinpay': '通联钱包',\n",
      " 'autohome': '汽车之家',\n",
      " 'blm': '菠萝觅BLM',\n",
      " 'blmsdk': '菠萝觅SDK',\n",
      " 'boluome': '菠萝觅',\n",
      " 'chubao': '触宝电话',\n",
      " 'fft': '付费通',\n",
      " 'ikonke': '小K智能生活服务',\n",
      " 'jhdp': '聚浩大屏',\n",
      " 'jst': '聚事通',\n",
      " 'kkcredit': '卡卡贷',\n",
      " 'mybosc': '上行快线',\n",
      " 'pingan-one': '平安一账通',\n",
      " 'roobo': 'Roobo智能生活',\n",
      " 'scity': '市民服务',\n",
      " 'yeah': '行悦电视',\n",
      " 'zuwoojia': '租我家',\n",
      " 'zybank': '中原银行'}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/python3/lib/python3.6/site-packages/ipykernel/__main__.py:1: DeprecationWarning: generator 'RecordCollection.__iter__' raised StopIteration\n",
      "  if __name__ == '__main__':\n"
     ]
    }
   ],
   "source": [
    "map_app={r.app_code:r.app_name for r in rows}\n",
    "pprint(map_app)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "main_id='boluome-menpiao_lvmama-2017-03-155'\n",
    "select_data = db.query(\"SELECT id FROM transaction_amount_daily WHERE id=:main_id\", main_id=main_id)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "import records\n",
    "import time\n",
    "from datetime import datetime\n",
    "import tablib\n",
    "import psycopg2\n",
    "import records\n",
    "import redis\n",
    "from celery import Celery, Task, platforms\n",
    "from pymongo import MongoClient\n",
    "import pandas as pd\n",
    "\n",
    "MONGO_HOST = [\"mongodb://root:Boluome123@192.168.0.10\", \"192.168.0.7\"]\n",
    "REPLICASET_NAME = 'foba'\n",
    "class PreReportTask():\n",
    "    abstract = True\n",
    "    _rdb = None\n",
    "    _mdb = None\n",
    "    _pdb = None\n",
    "\n",
    "    @property\n",
    "    def rdb(self):\n",
    "        if self._rdb is None:\n",
    "            self._rdb = redis.StrictRedis(\n",
    "                host=conf.REDIS_ACTIVITY_HOST,\n",
    "                port=conf.REDIS_ACTIVITY_PORT,\n",
    "                db=conf.REDIS_ACTIVITY_DB)\n",
    "        return self._rdb\n",
    "\n",
    "    @property\n",
    "    def mdb(self):\n",
    "        if self._mdb is None:\n",
    "            _mc = MongoClient(MONGO_HOST, replicaset=REPLICASET_NAME)\n",
    "            self._mdb = _mc['boluome']\n",
    "        return self._mdb\n",
    "\n",
    "    @property\n",
    "    def pdb(self):\n",
    "        if self._pdb is None:\n",
    "            self._pdb = records.Database(\"postgresql+psycopg2://root:Boluome123@192.168.0.8/oto_saas\")\n",
    "        return self._pdb\n",
    "p=PreReportTask()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 230,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "datetime.datetime(2017, 5, 24, 16, 22, 48, 841245)"
      ]
     },
     "execution_count": 230,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "datetime.now()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 240,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "localtime=time.localtime()\n",
    "year, month, day, hour = localtime.tm_year, localtime.tm_mon, localtime.tm_mday, localtime.tm_hour\n",
    "day_start = time.mktime((year, month, day, 0, 0, 0, 0, 0, 0)) * 1000\n",
    "start = time.mktime((year, month-1, day-10, hour - 1, 0, 0, 0, 0, 0)) * 1000\n",
    "end = time.mktime((year, month, day, hour, 0, 0, 0, 0, 0)) * 1000\n",
    "app_code=\"allinpay\"\n",
    "mdb_data = p.mdb.order_lite_list.aggregate([{'$match': {'appCode': app_code}},\n",
    "                                            {'$match': {'$or': [{'createdAt': {'$gte': start, '$lt': end}},\n",
    "                                                                       {'completedAt': {'$gte': start, '$lt': end}}]}}])\n",
    "mdb_data_sum = p.mdb.order_lite_list.aggregate([{'$match': {'appCode': app_code+\"2\"}},\n",
    "                                                {'$match': {'$or': [{'createdAt': {'$gte': day_start, '$lt': end}},\n",
    "                                                                           {'completedAt': {'$gte': day_start, '$lt': end}}]}}])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 233,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<RecordCollection size=0 pending=True>"
      ]
     },
     "execution_count": 233,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "p.pdb.query(\"UPDATE transaction_amount_daily \"\n",
    "                   \"SET amount_hourly[:hour]=:amount,\"\n",
    "                   \"number_of_completed_orders_hourly[:hour]=:num_complet, mtime=:mtime  \"\n",
    "                   \"WHERE id=:main_id;\", hour=2, amount=0, num_complet=0, mtime=datetime.now(), main_id='91ala-all-2017-04-10')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "df=pd.DataFrame(list(mdb_data)).groupby([\"status\"])[\"id\",\"price\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 239,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "25"
      ]
     },
     "execution_count": 239,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.count().sum()[\"id\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 215,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "198.81"
      ]
     },
     "execution_count": 215,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.sum().loc[8,\"price\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 226,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 226,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "4 in df.indices"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 216,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "Cannot access attribute 'index' of 'DataFrameGroupBy' objects, try using the 'apply' method",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-216-80a8c0113482>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;36m4\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/usr/local/python3/lib/python3.6/site-packages/pandas/core/groupby.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, attr)\u001b[0m\n\u001b[1;32m    546\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mattr\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    547\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mhasattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mattr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 548\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_wrapper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mattr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    549\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    550\u001b[0m         raise AttributeError(\"%r object has no attribute %r\" %\n",
      "\u001b[0;32m/usr/local/python3/lib/python3.6/site-packages/pandas/core/groupby.py\u001b[0m in \u001b[0;36m_make_wrapper\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m    560\u001b[0m                    \"using the 'apply' method\".format(kind, name,\n\u001b[1;32m    561\u001b[0m                                                      type(self).__name__))\n\u001b[0;32m--> 562\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mAttributeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmsg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    563\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    564\u001b[0m         \u001b[0;31m# need to setup the selection\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mAttributeError\u001b[0m: Cannot access attribute 'index' of 'DataFrameGroupBy' objects, try using the 'apply' method"
     ]
    }
   ],
   "source": [
    " 4 in df.index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 199,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "status=df.groupby([\"status\"])[\"id\"].count().index\n",
    "4 in status"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true,
    "scrolled": true
   },
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "Cannot access callable attribute 'groupby' of 'DataFrameGroupBy' objects, try using the 'apply' method",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-205-02e4f839c566>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgroupby\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"status\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"id\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"price\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/usr/local/python3/lib/python3.6/site-packages/pandas/core/groupby.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, attr)\u001b[0m\n\u001b[1;32m    546\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mattr\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    547\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mhasattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mattr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 548\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_wrapper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mattr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    549\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    550\u001b[0m         raise AttributeError(\"%r object has no attribute %r\" %\n",
      "\u001b[0;32m/usr/local/python3/lib/python3.6/site-packages/pandas/core/groupby.py\u001b[0m in \u001b[0;36m_make_wrapper\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m    560\u001b[0m                    \"using the 'apply' method\".format(kind, name,\n\u001b[1;32m    561\u001b[0m                                                      type(self).__name__))\n\u001b[0;32m--> 562\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mAttributeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmsg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    563\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    564\u001b[0m         \u001b[0;31m# need to setup the selection\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mAttributeError\u001b[0m: Cannot access callable attribute 'groupby' of 'DataFrameGroupBy' objects, try using the 'apply' method"
     ]
    }
   ],
   "source": [
    "df.groupby([\"status\"])[\"id\",\"price\"].sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true,
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "status\n",
       "0     8\n",
       "7     5\n",
       "8     7\n",
       "9     1\n",
       "11    4\n",
       "Name: appCode, dtype: int64"
      ]
     },
     "execution_count": 150,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby(\"status\").count()[\"appCode\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 247,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "'status'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-247-b0a06d625bc1>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmdb_data_sum\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgroupby\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"status\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"id\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"price\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/usr/local/python3/lib/python3.6/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mgroupby\u001b[0;34m(self, by, axis, level, as_index, sort, group_keys, squeeze, **kwargs)\u001b[0m\n\u001b[1;32m   4269\u001b[0m         return groupby(self, by=by, axis=axis, level=level, as_index=as_index,\n\u001b[1;32m   4270\u001b[0m                        \u001b[0msort\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msort\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgroup_keys\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mgroup_keys\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msqueeze\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msqueeze\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4271\u001b[0;31m                        **kwargs)\n\u001b[0m\u001b[1;32m   4272\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4273\u001b[0m     def asfreq(self, freq, method=None, how=None, normalize=False,\n",
      "\u001b[0;32m/usr/local/python3/lib/python3.6/site-packages/pandas/core/groupby.py\u001b[0m in \u001b[0;36mgroupby\u001b[0;34m(obj, by, **kwds)\u001b[0m\n\u001b[1;32m   1624\u001b[0m         \u001b[0;32mraise\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'invalid type: %s'\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1625\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1626\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mklass\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mby\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1627\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1628\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/python3/lib/python3.6/site-packages/pandas/core/groupby.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, obj, keys, axis, level, grouper, exclusions, selection, as_index, sort, group_keys, squeeze, **kwargs)\u001b[0m\n\u001b[1;32m    390\u001b[0m                                                     \u001b[0mlevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    391\u001b[0m                                                     \u001b[0msort\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msort\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 392\u001b[0;31m                                                     mutated=self.mutated)\n\u001b[0m\u001b[1;32m    393\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    394\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mobj\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/python3/lib/python3.6/site-packages/pandas/core/groupby.py\u001b[0m in \u001b[0;36m_get_grouper\u001b[0;34m(obj, key, axis, level, sort, mutated)\u001b[0m\n\u001b[1;32m   2615\u001b[0m                 \u001b[0min_axis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgpr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgpr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2616\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2617\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgpr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2618\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgpr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mGrouper\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mgpr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkey\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2619\u001b[0m             \u001b[0;31m# Add key to exclusions\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: 'status'"
     ]
    }
   ],
   "source": [
    "list(mdb_data_sum)\n",
    "pd.DataFrame([]).groupby([\"status\"])[\"id\", \"price\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 241,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "df_sum=pd.DataFrame(list(mdb_data_sum))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 243,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: []\n",
       "Index: []"
      ]
     },
     "execution_count": 243,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_sum"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[ObjectId('58f42867d57d1722f9018426'),\n",
       " '100000399605',\n",
       " '成人票',\n",
       " 'menpiao',\n",
       " 35,\n",
       " '161229528907723',\n",
       " 8,\n",
       " '已取消',\n",
       " 'lvmama',\n",
       " '17317192506',\n",
       " 'allinpay',\n",
       " '260',\n",
       " '161229528907723',\n",
       " 1492396135611.0,\n",
       " 1492396135611.0]"
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(item.values())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "ename": "InvalidDimensions",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mInvalidDimensions\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-135-bddecd22995e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtablib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdict\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmdb_data\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/usr/local/python3/lib/python3.6/site-packages/tablib/core.py\u001b[0m in \u001b[0;36m_set_dict\u001b[0;34m(self, pickle)\u001b[0m\n\u001b[1;32m    388\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mheaders\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpickle\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkeys\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    389\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0mrow\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mpickle\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 390\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mRow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    391\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    392\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mUnsupportedFormat\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/python3/lib/python3.6/site-packages/tablib/core.py\u001b[0m in \u001b[0;36mappend\u001b[0;34m(self, row, tags)\u001b[0m\n\u001b[1;32m    669\u001b[0m         \"\"\"\n\u001b[1;32m    670\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 671\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrpush\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtags\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    672\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    673\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mextend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrows\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtags\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/python3/lib/python3.6/site-packages/tablib/core.py\u001b[0m in \u001b[0;36mrpush\u001b[0;34m(self, row, tags)\u001b[0m\n\u001b[1;32m    653\u001b[0m         \"\"\"\n\u001b[1;32m    654\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 655\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minsert\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mheight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrow\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtags\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtags\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    656\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    657\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/python3/lib/python3.6/site-packages/tablib/core.py\u001b[0m in \u001b[0;36minsert\u001b[0;34m(self, index, row, tags)\u001b[0m\n\u001b[1;32m    644\u001b[0m        \"\"\"\n\u001b[1;32m    645\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 646\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    647\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minsert\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mRow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtags\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtags\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    648\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/python3/lib/python3.6/site-packages/tablib/core.py\u001b[0m in \u001b[0;36m_validate\u001b[0;34m(self, row, col, safety)\u001b[0m\n\u001b[1;32m    284\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    285\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0msafety\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 286\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mInvalidDimensions\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    287\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    288\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mInvalidDimensions\u001b[0m: "
     ]
    }
   ],
   "source": [
    "data=tablib.Dataset()\n",
    "data.dict=mdb_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "mdb_data=[item for item in mdb_data]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'_id': ObjectId('58f03c28d57d1722f90183ea'),\n",
       "  'appCode': 'allinpay',\n",
       "  'channel': 'lvmama',\n",
       "  'createdAt': 1492139048529.0,\n",
       "  'customerId': '260',\n",
       "  'customerOrderId': '201704141102500197',\n",
       "  'customerUserId': '170223548326598',\n",
       "  'displayStatus': '已支付',\n",
       "  'id': '100000399569',\n",
       "  'name': '学生票 仅门票，不含摆渡车费用',\n",
       "  'orderType': 'menpiao',\n",
       "  'payChannel': 'allinpay_qianbao',\n",
       "  'price': 0.01,\n",
       "  'status': 3,\n",
       "  'updatedAt': 1492139048529.0,\n",
       "  'userId': '170223548326598',\n",
       "  'userPhone': '13122221111'},\n",
       " {'_id': ObjectId('58f06bd8d57d1722f90183f8'),\n",
       "  'appCode': 'allinpay',\n",
       "  'channel': 'lvmama',\n",
       "  'createdAt': 1492151256816.0,\n",
       "  'customerId': '260',\n",
       "  'customerOrderId': '201704141426170379',\n",
       "  'customerUserId': '170223548326598',\n",
       "  'displayStatus': '等待退款',\n",
       "  'id': '100000399578',\n",
       "  'name': '学生票 仅门票，不含摆渡车费用',\n",
       "  'orderType': 'menpiao',\n",
       "  'payChannel': 'allinpay_qianbao',\n",
       "  'price': 0.01,\n",
       "  'status': 11,\n",
       "  'updatedAt': 1492151256816.0,\n",
       "  'userId': '170223548326598',\n",
       "  'userPhone': '13122221111'},\n",
       " {'_id': ObjectId('58f42867d57d1722f9018426'),\n",
       "  'appCode': 'allinpay',\n",
       "  'channel': 'lvmama',\n",
       "  'createdAt': 1492396135611.0,\n",
       "  'customerId': '260',\n",
       "  'customerUserId': '161229528907723',\n",
       "  'displayStatus': '已取消',\n",
       "  'id': '100000399605',\n",
       "  'name': '成人票',\n",
       "  'orderType': 'menpiao',\n",
       "  'price': 35,\n",
       "  'status': 8,\n",
       "  'updatedAt': 1492396135611.0,\n",
       "  'userId': '161229528907723',\n",
       "  'userPhone': '17317192506'},\n",
       " {'_id': ObjectId('58f4291bd57d1722f9018428'),\n",
       "  'appCode': 'allinpay',\n",
       "  'channel': 'lvmama',\n",
       "  'createdAt': 1492396315656.0,\n",
       "  'customerId': '260',\n",
       "  'customerOrderId': '201704171030360931',\n",
       "  'customerUserId': '170223548326598',\n",
       "  'displayStatus': '等待退款',\n",
       "  'id': '100000399606',\n",
       "  'name': '学生票 仅门票，不含摆渡车费用',\n",
       "  'orderType': 'menpiao',\n",
       "  'payChannel': 'allinpay_qianbao',\n",
       "  'price': 0.01,\n",
       "  'status': 11,\n",
       "  'updatedAt': 1492396315656.0,\n",
       "  'userId': '170223548326598',\n",
       "  'userPhone': '13122221111'},\n",
       " {'_id': ObjectId('58f42a6cd57d1722f901842c'),\n",
       "  'appCode': 'allinpay',\n",
       "  'channel': 'ele',\n",
       "  'createdAt': 1492396652254.0,\n",
       "  'customerId': '260',\n",
       "  'customerOrderId': '201704171036050948',\n",
       "  'customerUserId': '170223548326598',\n",
       "  'displayStatus': '等待退款',\n",
       "  'id': '100000399608',\n",
       "  'name': '尚嘟可渴',\n",
       "  'orderType': 'waimai',\n",
       "  'payChannel': 'allinpay_qianbao',\n",
       "  'price': 0.01,\n",
       "  'status': 11,\n",
       "  'updatedAt': 1492396652254.0,\n",
       "  'userId': '170223548326598',\n",
       "  'userPhone': '13122221111'},\n",
       " {'_id': ObjectId('58f42b1ad57d1722f901842e'),\n",
       "  'appCode': 'allinpay',\n",
       "  'channel': 'lvmama',\n",
       "  'createdAt': 1492396826179.0,\n",
       "  'customerId': '260',\n",
       "  'customerOrderId': '201704171039080955',\n",
       "  'customerUserId': '170223548326598',\n",
       "  'displayStatus': '等待退款',\n",
       "  'id': '100000399609',\n",
       "  'name': '学生票 仅门票，不含摆渡车费用',\n",
       "  'orderType': 'menpiao',\n",
       "  'payChannel': 'allinpay_qianbao',\n",
       "  'price': 20,\n",
       "  'status': 11,\n",
       "  'updatedAt': 1492396826179.0,\n",
       "  'userId': '170223548326598',\n",
       "  'userPhone': '13122221111'},\n",
       " {'_id': ObjectId('58f430a3d57d1722f9018432'),\n",
       "  'appCode': 'allinpay',\n",
       "  'cancelledAt': 1492398345245.0,\n",
       "  'channel': 'lvmama',\n",
       "  'createdAt': 1492398243017.0,\n",
       "  'customerId': '260',\n",
       "  'customerOrderId': '201704171102430975',\n",
       "  'customerUserId': '170223548326598',\n",
       "  'displayStatus': '已退款',\n",
       "  'id': '100000399614',\n",
       "  'name': '学生票 仅门票，不含摆渡车费用',\n",
       "  'orderType': 'menpiao',\n",
       "  'payChannel': 'allinpay_qianbao',\n",
       "  'price': 20,\n",
       "  'refundedAt': 1494316879503.0,\n",
       "  'status': 7,\n",
       "  'updatedAt': 1492398243017.0,\n",
       "  'userId': '170223548326598',\n",
       "  'userPhone': '13122221111'},\n",
       " {'_id': ObjectId('58f5eb8d6624a80d6d1d3cd9'),\n",
       "  'appCode': 'allinpay',\n",
       "  'channel': 'ele',\n",
       "  'createdAt': 1492511629857.0,\n",
       "  'customerId': '260',\n",
       "  'customerUserId': '161229370689621',\n",
       "  'displayStatus': '已取消',\n",
       "  'id': '100000399671',\n",
       "  'name': '闪电购便利店(天潼路店)',\n",
       "  'orderType': 'waimai',\n",
       "  'price': 48.8,\n",
       "  'status': 8,\n",
       "  'updatedAt': 1492511629857.0,\n",
       "  'userId': '161229370689621',\n",
       "  'userPhone': '18616806256'},\n",
       " {'_id': ObjectId('58f6c1496624a80d6d1d3ce3'),\n",
       "  'appCode': 'allinpay',\n",
       "  'channel': 'ele',\n",
       "  'createdAt': 1492566345342.0,\n",
       "  'customerId': '260',\n",
       "  'customerUserId': '170223548326598',\n",
       "  'displayStatus': '已取消',\n",
       "  'id': '100000399681',\n",
       "  'name': '味佳小厨',\n",
       "  'orderType': 'waimai',\n",
       "  'price': 51,\n",
       "  'status': 8,\n",
       "  'updatedAt': 1492566345342.0,\n",
       "  'userId': '170223548326598',\n",
       "  'userPhone': '13122221111'},\n",
       " {'_id': ObjectId('58f6c1896624a80d6d1d3ce5'),\n",
       "  'appCode': 'allinpay',\n",
       "  'channel': 'ele',\n",
       "  'createdAt': 1492566409690.0,\n",
       "  'customerId': '260',\n",
       "  'customerOrderId': '201704190945212300',\n",
       "  'customerUserId': '170223548326598',\n",
       "  'displayStatus': '等待商家接单',\n",
       "  'id': '100000399682',\n",
       "  'name': '6度时光蛋糕（锦秋路店）',\n",
       "  'orderType': 'waimai',\n",
       "  'payChannel': 'allinpay_qianbao',\n",
       "  'price': 0.1,\n",
       "  'status': 9,\n",
       "  'updatedAt': 1492566409690.0,\n",
       "  'userId': '170223548326598',\n",
       "  'userPhone': '13122221111'},\n",
       " {'_id': ObjectId('58f6d1b66624a80d6d1d3ceb'),\n",
       "  'appCode': 'allinpay',\n",
       "  'channel': 'ele',\n",
       "  'createdAt': 1492570550821.0,\n",
       "  'customerId': '260',\n",
       "  'customerUserId': '170412548345943',\n",
       "  'displayStatus': '异常',\n",
       "  'id': '100000399693',\n",
       "  'name': '闪电购便利店(尊享店)',\n",
       "  'orderType': 'waimai',\n",
       "  'price': 0,\n",
       "  'status': 0,\n",
       "  'updatedAt': 1492570550821.0,\n",
       "  'userId': '170412548345943',\n",
       "  'userPhone': '15712898355'},\n",
       " {'_id': ObjectId('58f6d1bb6624a80d6d1d3ced'),\n",
       "  'appCode': 'allinpay',\n",
       "  'channel': 'ele',\n",
       "  'createdAt': 1492570555788.0,\n",
       "  'customerId': '260',\n",
       "  'customerUserId': '170412548345943',\n",
       "  'displayStatus': '异常',\n",
       "  'id': '100000399694',\n",
       "  'name': '闪电购便利店(尊享店)',\n",
       "  'orderType': 'waimai',\n",
       "  'price': 0,\n",
       "  'status': 0,\n",
       "  'updatedAt': 1492570555788.0,\n",
       "  'userId': '170412548345943',\n",
       "  'userPhone': '15712898355'},\n",
       " {'_id': ObjectId('58f6d1be6624a80d6d1d3cef'),\n",
       "  'appCode': 'allinpay',\n",
       "  'channel': 'ele',\n",
       "  'createdAt': 1492570558031.0,\n",
       "  'customerId': '260',\n",
       "  'customerUserId': '170412548345943',\n",
       "  'displayStatus': '异常',\n",
       "  'id': '100000399695',\n",
       "  'name': '闪电购便利店(尊享店)',\n",
       "  'orderType': 'waimai',\n",
       "  'price': 0,\n",
       "  'status': 0,\n",
       "  'updatedAt': 1492570558031.0,\n",
       "  'userId': '170412548345943',\n",
       "  'userPhone': '15712898355'},\n",
       " {'_id': ObjectId('58f6d1bf6624a80d6d1d3cf1'),\n",
       "  'appCode': 'allinpay',\n",
       "  'channel': 'ele',\n",
       "  'createdAt': 1492570559370.0,\n",
       "  'customerId': '260',\n",
       "  'customerUserId': '170412548345943',\n",
       "  'displayStatus': '异常',\n",
       "  'id': '100000399696',\n",
       "  'name': '闪电购便利店(尊享店)',\n",
       "  'orderType': 'waimai',\n",
       "  'price': 0,\n",
       "  'status': 0,\n",
       "  'updatedAt': 1492570559370.0,\n",
       "  'userId': '170412548345943',\n",
       "  'userPhone': '15712898355'},\n",
       " {'_id': ObjectId('58f6d1c06624a80d6d1d3cf3'),\n",
       "  'appCode': 'allinpay',\n",
       "  'channel': 'ele',\n",
       "  'createdAt': 1492570560585.0,\n",
       "  'customerId': '260',\n",
       "  'customerUserId': '170412548345943',\n",
       "  'displayStatus': '异常',\n",
       "  'id': '100000399697',\n",
       "  'name': '闪电购便利店(尊享店)',\n",
       "  'orderType': 'waimai',\n",
       "  'price': 0,\n",
       "  'status': 0,\n",
       "  'updatedAt': 1492570560585.0,\n",
       "  'userId': '170412548345943',\n",
       "  'userPhone': '15712898355'},\n",
       " {'_id': ObjectId('58f6d1c16624a80d6d1d3cf5'),\n",
       "  'appCode': 'allinpay',\n",
       "  'channel': 'ele',\n",
       "  'createdAt': 1492570561333.0,\n",
       "  'customerId': '260',\n",
       "  'customerUserId': '170412548345943',\n",
       "  'displayStatus': '异常',\n",
       "  'id': '100000399698',\n",
       "  'name': '闪电购便利店(尊享店)',\n",
       "  'orderType': 'waimai',\n",
       "  'price': 0,\n",
       "  'status': 0,\n",
       "  'updatedAt': 1492570561333.0,\n",
       "  'userId': '170412548345943',\n",
       "  'userPhone': '15712898355'},\n",
       " {'_id': ObjectId('58f6d1c16624a80d6d1d3cf7'),\n",
       "  'appCode': 'allinpay',\n",
       "  'channel': 'ele',\n",
       "  'createdAt': 1492570561839.0,\n",
       "  'customerId': '260',\n",
       "  'customerUserId': '170412548345943',\n",
       "  'displayStatus': '异常',\n",
       "  'id': '100000399699',\n",
       "  'name': '闪电购便利店(尊享店)',\n",
       "  'orderType': 'waimai',\n",
       "  'price': 0,\n",
       "  'status': 0,\n",
       "  'updatedAt': 1492570561839.0,\n",
       "  'userId': '170412548345943',\n",
       "  'userPhone': '15712898355'},\n",
       " {'_id': ObjectId('58f745216624a80d6d1d3da3'),\n",
       "  'appCode': 'allinpay',\n",
       "  'channel': 'ele',\n",
       "  'createdAt': 1492600097362.0,\n",
       "  'customerId': '260',\n",
       "  'customerUserId': '170223548326598',\n",
       "  'displayStatus': '已取消',\n",
       "  'id': '100000399807',\n",
       "  'name': '尚嘟可渴',\n",
       "  'orderType': 'waimai',\n",
       "  'price': 33,\n",
       "  'status': 8,\n",
       "  'updatedAt': 1492600097362.0,\n",
       "  'userId': '170223548326598',\n",
       "  'userPhone': '13122221111'},\n",
       " {'_id': ObjectId('58f745806624a80d6d1d3da5'),\n",
       "  'appCode': 'allinpay',\n",
       "  'channel': 'ele',\n",
       "  'createdAt': 1492600192697.0,\n",
       "  'customerId': '260',\n",
       "  'customerOrderId': '201704191908240042',\n",
       "  'customerUserId': '170223548326598',\n",
       "  'displayStatus': '已退款',\n",
       "  'id': '100000399808',\n",
       "  'name': '段氏龙虾',\n",
       "  'orderType': 'waimai',\n",
       "  'payChannel': 'allinpay_qianbao',\n",
       "  'price': 2,\n",
       "  'refundedAt': 1494213117261.0,\n",
       "  'status': 7,\n",
       "  'updatedAt': 1492600192697.0,\n",
       "  'userId': '170223548326598',\n",
       "  'userPhone': '13122221111'},\n",
       " {'_id': ObjectId('58fdf1be1155d17f070d54db'),\n",
       "  'appCode': 'allinpay',\n",
       "  'channel': 'ele',\n",
       "  'createdAt': 1493037502575.0,\n",
       "  'customerId': '260',\n",
       "  'customerUserId': '170223548326598',\n",
       "  'displayStatus': '已取消',\n",
       "  'id': '100000400397',\n",
       "  'name': '麻辣香锅手擀面',\n",
       "  'orderType': 'waimai',\n",
       "  'price': 26,\n",
       "  'status': 8,\n",
       "  'updatedAt': 1493037502575.0,\n",
       "  'userId': '170223548326598',\n",
       "  'userPhone': '13122221111'},\n",
       " {'_id': ObjectId('58fdf2c4aa470305d630e673'),\n",
       "  'appCode': 'allinpay',\n",
       "  'channel': 'ele',\n",
       "  'createdAt': 1493037764313.0,\n",
       "  'customerId': '260',\n",
       "  'customerUserId': '170223548326598',\n",
       "  'displayStatus': '已取消',\n",
       "  'id': '100000400399',\n",
       "  'name': '麻辣香锅手擀面',\n",
       "  'orderType': 'waimai',\n",
       "  'price': 0.01,\n",
       "  'status': 8,\n",
       "  'updatedAt': 1493037764313.0,\n",
       "  'userId': '170223548326598',\n",
       "  'userPhone': '13122221111'},\n",
       " {'_id': ObjectId('58fea6d9aa470305d630e689'),\n",
       "  'appCode': 'allinpay',\n",
       "  'channel': 'ele',\n",
       "  'createdAt': 1493083865326.0,\n",
       "  'customerId': '260',\n",
       "  'customerOrderId': '201704250929371810',\n",
       "  'customerUserId': '170223548326598',\n",
       "  'displayStatus': '已退款',\n",
       "  'id': '100000400411',\n",
       "  'name': '酸小七',\n",
       "  'orderType': 'waimai',\n",
       "  'payChannel': 'allinpay_qianbao',\n",
       "  'price': 0.01,\n",
       "  'refundedAt': 1494312999054.0,\n",
       "  'status': 7,\n",
       "  'updatedAt': 1493083865326.0,\n",
       "  'userId': '170223548326598',\n",
       "  'userPhone': '13122221111'},\n",
       " {'_id': ObjectId('5909793e59d7092b0144f63c'),\n",
       "  'appCode': 'allinpay',\n",
       "  'channel': 'ele',\n",
       "  'createdAt': 1493793086003.0,\n",
       "  'customerId': '260',\n",
       "  'customerUserId': '170223548326598',\n",
       "  'displayStatus': '已取消',\n",
       "  'id': '100000401153',\n",
       "  'name': '蜜哆哆韩式炸鸡（虹口店）',\n",
       "  'orderType': 'waimai',\n",
       "  'price': 5,\n",
       "  'status': 8,\n",
       "  'updatedAt': 1493793086003.0,\n",
       "  'userId': '170223548326598',\n",
       "  'userPhone': '13122221111'},\n",
       " {'_id': ObjectId('59097a1559d7092b0144f63e'),\n",
       "  'appCode': 'allinpay',\n",
       "  'channel': 'ele',\n",
       "  'createdAt': 1493793301368.0,\n",
       "  'customerId': '260',\n",
       "  'customerOrderId': '201705031433330799',\n",
       "  'customerUserId': '170223548326598',\n",
       "  'displayStatus': '已退款',\n",
       "  'id': '100000401154',\n",
       "  'name': '蜜哆哆韩式炸鸡（虹口店）',\n",
       "  'orderType': 'waimai',\n",
       "  'payChannel': 'allinpay_qianbao',\n",
       "  'price': 0.01,\n",
       "  'refundedAt': 1494314473143.0,\n",
       "  'status': 7,\n",
       "  'updatedAt': 1493793301368.0,\n",
       "  'userId': '170223548326598',\n",
       "  'userPhone': '13122221111'},\n",
       " {'_id': ObjectId('590c3d153d2142118fbd5afe'),\n",
       "  'appCode': 'allinpay',\n",
       "  'channel': 'ele',\n",
       "  'createdAt': 1493974293303.0,\n",
       "  'customerId': '260',\n",
       "  'customerUserId': '170223548326598',\n",
       "  'displayStatus': '异常',\n",
       "  'id': '100000401421',\n",
       "  'name': 'Guo Yi 果艺沙拉果汁',\n",
       "  'orderType': 'waimai',\n",
       "  'price': 0,\n",
       "  'status': 0,\n",
       "  'updatedAt': 1493974293303.0,\n",
       "  'userId': '170223548326598',\n",
       "  'userPhone': '13122221111'},\n",
       " {'_id': ObjectId('590c3d263d2142118fbd5b00'),\n",
       "  'appCode': 'allinpay',\n",
       "  'channel': 'ele',\n",
       "  'createdAt': 1493974310918.0,\n",
       "  'customerId': '260',\n",
       "  'customerOrderId': '201705051650252717',\n",
       "  'customerUserId': '170223548326598',\n",
       "  'displayStatus': '已退款',\n",
       "  'id': '100000401422',\n",
       "  'name': 'Guo Yi 果艺沙拉果汁',\n",
       "  'orderType': 'waimai',\n",
       "  'payChannel': 'allinpay_qianbao',\n",
       "  'price': 0.01,\n",
       "  'refundedAt': 1493978583855.0,\n",
       "  'status': 7,\n",
       "  'updatedAt': 1493974310918.0,\n",
       "  'userId': '170223548326598',\n",
       "  'userPhone': '13122221111'}]"
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mdb_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'__v': 0,\n",
       " '_id': ObjectId('57674b78a9bb110900ca8dae'),\n",
       " 'createdAt': 1466387320029.0,\n",
       " 'displayStatus': '已出发',\n",
       " 'id': '100000382698',\n",
       " 'name': '余额充值 - 100元',\n",
       " 'orderType': 'balance',\n",
       " 'price': 100,\n",
       " 'status': 9,\n",
       " 'updatedAt': 1466387320029.0,\n",
       " 'userId': '201612060000015593'}"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "p.mdb.order_lite_list.find_one()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
