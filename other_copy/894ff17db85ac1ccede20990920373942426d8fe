{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from connection import ConnectionTask\n",
    "import time\n",
    "c=ConnectionTask()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'id': 'ayd002439355039744', 'createdAt': 1509586802636, 'price': 4.99, 'paymentSerial': 'ayd012439355039745', 'status': 4, 'checkDate': '20171102', 'paidList': ['ayd012439355039745'], 'displayStatus': '平安anydoor测试对账订单'}\n",
      "{'price': 4.99, 'id': 'ayd002432860554115', 'createdAt': 1509537253193, 'paymentSerial': 'ayd012432860554116', 'status': 4, 'checkDate': '20171101', 'paidList': ['ayd012432860554116'], 'displayStatus': '平安anydoor测试对账订单'}\n",
      "{'price': 4.99, 'id': 'ayd002432910099333', 'createdAt': 1509537631932, 'paymentSerial': 'ayd012432910099334', 'status': 4, 'checkDate': '20171101', 'paidList': ['ayd012432910099334'], 'displayStatus': '平安anydoor测试对账订单'}\n",
      "{'price': 4.99, 'id': 'ayd002432912327559', 'createdAt': 1509537648711, 'paymentSerial': 'ayd012432912327560', 'status': 4, 'checkDate': '20171101', 'paidList': ['ayd012432912327560'], 'displayStatus': '平安anydoor测试对账订单'}\n",
      "{'price': 4.99, 'id': 'ayd002432925696905', 'createdAt': 1509537750187, 'paymentSerial': 'ayd012432925696906', 'status': 4, 'checkDate': '20171101', 'paidList': ['ayd012432925696906'], 'displayStatus': '平安anydoor测试对账订单'}\n",
      "{'id': 'ayd002441701359677', 'createdAt': 1509604703200, 'price': 4.99, 'paymentSerial': 'ayd012441701359678', 'status': 4, 'checkDate': '20171102', 'paidList': ['ayd012441701359678'], 'displayStatus': '平安anydoor测试对账订单'}\n",
      "{'id': 'ayd002441869787209', 'createdAt': 1509605988672, 'price': 4.99, 'paymentSerial': 'ayd012441869787210', 'status': 4, 'checkDate': '20171102', 'paidList': ['ayd012441869787210'], 'displayStatus': '平安anydoor测试对账订单'}\n",
      "{'id': 'ayd002443181031440', 'createdAt': 1509615992958, 'price': 4.99, 'paymentSerial': 'ayd012443181031441', 'status': 4, 'checkDate': '20171102', 'paidList': ['ayd012443181031441'], 'displayStatus': '平安anydoor测试对账订单'}\n",
      "{'price': 47.2, 'id': 'ayd002430625514155', 'createdAt': 1509520201611, 'paymentSerial': 'ayd012430625514156', 'status': 4, 'checkDate': '20171101', 'paidList': ['ayd012430625514156'], 'displayStatus': '平安anydoor测试对账订单'}\n"
     ]
    }
   ],
   "source": [
    "# 伪造客户测试对账单所需订单信息\n",
    "app_code=\"anydoor\"\n",
    "for order_type in c.dmdb[\"order_lite_list\"].distinct(\"orderType\"):\n",
    "    if not order_type:\n",
    "        # order_type maybe is None\n",
    "        continue\n",
    "    database = \"order_{}\".format(order_type)\n",
    "    for item in c.dmdb[database].find({\"appCode\": app_code, \n",
    "                                       \"$or\":[{\"userId\":{\"$regex\":\"886291402365377008\"}},\n",
    "                                             {\"userId\":{\"$regex\":\"333931402392399894\"}},\n",
    "                                             {\"userId\":{\"$regex\":\"227501416288947346\"}}]},\n",
    "                                        {\"_id\": 0, \"id\": 1, \"price\": 1, \"createdAt\":1,'paymentSerial':1}):\n",
    "        item['status']=4\n",
    "        item['checkDate']=time.strftime(\"%Y%m%d\",time.localtime(item['createdAt']/1000))\n",
    "        item['paidList']=[item['paymentSerial']]\n",
    "        item['displayStatus']='平安anydoor测试对账订单'\n",
    "        if item['checkDate'] in ['20171101','20171102']:\n",
    "            print(item)\n",
    "            c.dmdb[database].update_one({'id':item['id']},{'$set':item})\n",
    "#             c.dmdb[\"order_lite_list\"].update_one({'id':item['id']},{'$set':item})\n",
    "        else:\n",
    "            continue"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
