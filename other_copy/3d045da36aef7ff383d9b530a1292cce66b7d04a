{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "import copy\n",
    "import json\n",
    "import os\n",
    "import re\n",
    "import time\n",
    "from datetime import datetime\n",
    "from pprint import pprint\n",
    "from pymongo import MongoClient\n",
    "import ast\n",
    "\n",
    "import conf\n",
    "class CarTask():\n",
    "    #: If :const:`True` the task is an abstract base class.\n",
    "    abstract = True\n",
    "    _pro = None\n",
    "    _stg = None\n",
    "    _dev = None\n",
    "\n",
    "    @property\n",
    "    def pro(self):\n",
    "        if self._pro is None:\n",
    "            _pro = MongoClient(conf.PRO_MONGO_HOST, replicaset=conf.REPLICASET_NAME)\n",
    "            self._pro = _pro[\"boluome\"]\n",
    "        return self._pro\n",
    "\n",
    "    @property\n",
    "    def stg(self):\n",
    "        if self._stg is None:\n",
    "            _stg = MongoClient(conf.STG_MONGO_HOST, replicaset=conf.REPLICASET_NAME)\n",
    "            self._stg = _stg[\"boluome\"]\n",
    "        return self._stg\n",
    "\n",
    "    @property\n",
    "    def dev(self):\n",
    "        if self._dev is None:\n",
    "            _dev = MongoClient(conf.DEV_MONGO_HOST, replicaset=conf.REPLICASET_NAME)\n",
    "            self._dev = _dev[\"boluome\"]\n",
    "        return self._dev\n",
    "c=CarTask()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'str'>\n"
     ]
    }
   ],
   "source": [
    "with open('data/car_jianrong.json') as f:\n",
    "    car_data=f.read()\n",
    "print(type(car_data))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "list"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(car_data)\n",
    "data=ast.literal_eval(car_data)\n",
    "type(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "for index,item in enumerate(data):\n",
    "#     pprint(item)\n",
    "    c.dev.car.update_one({\"brand_name\": item[\"brand_name\"],\"brand_fl\": item[\"brand_fl\"]},{'$set':item},upsert=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "for item in c.dev.car.find({}):\n",
    "    fl=item['brand_fl']\n",
    "    name=item['brand_name']\n",
    "    pic=item['brandIcon'].split('/')[-1]\n",
    "    if 'jpg' in pic:\n",
    "        url=\"https://f1.otosaas.com/img/car/\"+pic\n",
    "    elif 'png' in pic:\n",
    "        url=\"https://f1.otosaas.com/img/che/\"+pic\n",
    "        \n",
    "    c.dev.car.update_one({\"brand_name\": name,\"brand_fl\": fl},{'$set':{\"brandIcon\":url}})\n",
    "    print(name,fl)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'https://f1.otosaas.com/img/che/yema.png'"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "url"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
