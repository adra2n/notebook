{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "from __future__ import absolute_import, unicode_literals\n",
    "\n",
    "import hashlib\n",
    "import json\n",
    "import operator\n",
    "import time\n",
    "import traceback\n",
    "import urllib\n",
    "\n",
    "from pprint import pprint \n",
    "import requests\n",
    "from celery import Celery, Task, platforms\n",
    "from celery.schedules import crontab\n",
    "from pymongo import MongoClient, ReturnDocument\n",
    "\n",
    "import conf\n",
    "\n",
    "class ConnectTask():\n",
    "    #: If :const:`True` the task is an abstract base class.\n",
    "    abstract = True\n",
    "    _pro = None\n",
    "    _stg = None\n",
    "    _dev = None\n",
    "\n",
    "    @property\n",
    "    def pro(self):\n",
    "        if self._pro is None:\n",
    "            _pro = MongoClient(conf.PRO_MONGO_HOST,\n",
    "                               replicaset=conf.REPLICASET_NAME)\n",
    "            self._pro = _pro[\"boluome\"]\n",
    "        return self._pro\n",
    "\n",
    "    @property\n",
    "    def stg(self):\n",
    "        if self._stg is None:\n",
    "            _stg = MongoClient(conf.STG_MONGO_HOST,\n",
    "                               replicaset=conf.REPLICASET_NAME)\n",
    "            self._stg = _stg[\"boluome\"]\n",
    "        return self._stg\n",
    "\n",
    "    @property\n",
    "    def dev(self):\n",
    "        if self._dev is None:\n",
    "            _dev = MongoClient(conf.DEV_MONGO_HOST,\n",
    "                               replicaset=conf.REPLICASET_NAME)\n",
    "            self._dev = _dev[\"boluome\"]\n",
    "        return self._dev\n",
    "c=ConnectTask()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10939"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c.stg.menpiao_products.find({}).count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10939"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c.pro.menpiao_products_1.find({}).count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "48165"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c.stg.menpiao_goods.find({}).count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c.pro.menpiao_goods_1.find({}).count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "for item in c.stg.menpiao_goods.find({},{\"_id\":0}):\n",
    "    c.pro.menpiao_goods_1.update_one({\"id\":item['id']},{\"$set\":item},upsert=True)\n",
    "#     print(item[\"id\"])\n",
    "#     break"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "c.stg.menpiao_products.find({}).count()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "### 针对已完成订单 order_lite_list 补全completedAt字段\n",
    "+ dev\n",
    "+ stg\n",
    "+ pro"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "for item in c.dev.order_lite_list.find({'status':{'$in':[4,'4']},#'completedAt':{'$exists':None}\n",
    "                                       }):\n",
    "    try:\n",
    "        order_type = item['orderType']\n",
    "        order_id = item['id']\n",
    "    except KeyError:\n",
    "        print('KeyError',item)\n",
    "    order_detail = c.dev['order_{}'.format(order_type)].find_one({'id': order_id})\n",
    "    if not order_detail:\n",
    "        print(order_id,'no data')\n",
    "        continue\n",
    "    assert order_detail.get('timeline'),'no timeline'\n",
    "    lasttime=order_detail['timeline'][-1].split()\n",
    "    time_date='2017-'+lasttime[0] if lasttime[0]<'04-11' else '2016-'+lasttime[0]\n",
    "    time_time=lasttime[1]+':59'\n",
    "    update_time=time.mktime(time.strptime(time_date+' '+time_time,\"%Y-%m-%d %H:%M:%S\"))*1000\n",
    "    c.dev['order_{}'.format(order_type)].update_one({'id':order_id},{'$set':{'completedAt':update_time}})\n",
    "    c.dev.order_lite_list.update_one({'id':order_id},{'$set':{'completedAt':update_time}})\n",
    "#     print(order_id,update_time)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10000003751 no data\n",
      "10000003752 no data\n"
     ]
    }
   ],
   "source": [
    "for item in c.stg.order_lite_list.find({'status':{'$in':[4,'4']},#'completedAt':{'$exists':None}\n",
    "                                       }):\n",
    "    try:\n",
    "        order_type = item['orderType']\n",
    "        order_id = item['id']\n",
    "    except KeyError:\n",
    "        print('KeyError',item)\n",
    "    order_detail = c.stg['order_{}'.format(order_type)].find_one({'id': order_id})\n",
    "    if not order_detail:\n",
    "        print(order_id,'no data')\n",
    "        continue\n",
    "    assert order_detail.get('timeline'),'no timeline'\n",
    "    lasttime=order_detail['timeline'][-1].split()\n",
    "    time_date='2017-'+lasttime[0] if lasttime[0]<'04-11' else '2016-'+lasttime[0]\n",
    "    time_time=lasttime[1]+':59'\n",
    "    update_time=time.mktime(time.strptime(time_date+' '+time_time,\"%Y-%m-%d %H:%M:%S\"))*1000\n",
    "    c.stg['order_{}'.format(order_type)].update_one({'id':order_id},{'$set':{'completedAt':update_time}})\n",
    "    c.stg.order_lite_list.update_one({'id':order_id},{'$set':{'completedAt':update_time}})\n",
    "#     print(order_id,update_time)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "for item in c.pro.order_lite_list.find({'status':{'$in':[4,'4']},#'completedAt':{'$exists':None}\n",
    "                                       }):\n",
    "    try:\n",
    "        order_type = item['orderType']\n",
    "        order_id = item['id']\n",
    "    except KeyError:\n",
    "        print('KeyError',item)\n",
    "    order_detail = c.pro['order_{}'.format(order_type)].find_one({'id': order_id})\n",
    "    if not order_detail:\n",
    "        print(order_id,'no data')\n",
    "        continue\n",
    "    if not order_detail.get('timeline',None):\n",
    "        print('timeline no data')\n",
    "        continue\n",
    "#     assert order_detail.get('timeline'),order_id+'no timeline'\n",
    "    lasttime=order_detail['timeline'][-1].split()\n",
    "    time_date='2017-'+lasttime[0] if lasttime[0]<'04-11' else '2016-'+lasttime[0]\n",
    "    time_time=lasttime[1]+':59'\n",
    "    update_time=time.mktime(time.strptime(time_date+' '+time_time,\"%Y-%m-%d %H:%M:%S\"))*1000\n",
    "    c.pro['order_{}'.format(order_type)].update_one({'id':order_id},{'$set':{'completedAt':update_time}})\n",
    "    c.pro.order_lite_list.update_one({'id':order_id},{'$set':{'completedAt':update_time}})\n",
    "#     print(order_id,update_time)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "46247"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c.pro.order_lite_list.find({'status':{'$in':[4,'4']},'completedAt':{'$exists':False}}).count()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "### 携程酒店数据库一览\n",
    "+ del {__v:{$ne:1}}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "data=c.pro.jiudian_hotels.distinct('id',{})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'1000009'"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "# c.stg.jiudian_hotels.find_one({'id':'1484395'})\n",
    "c.stg.jiudian_hotels.find({},{'_id':0,'id':1}).count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c.stg.jiudian_hotels.find({'__v':{'$ne':1}}).count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "390100"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c.stg.jiudian_hotels.find({'__v':1}).count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "150411"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c.stg.jiudian_hotels.find({'__v':1,'rooms':None}).count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c.stg.jiudian_hotels.find({'rooms':{'$exists':False}},{'_id':0,'id':1}).count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<pymongo.results.DeleteResult at 0x7fe5803b0ee8>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c.stg.jiudian_hotels.delete_many({'__v':{'$ne':1}})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "count=0\n",
    "for item in c.stg.jiudian_hotels.find({'rooms':{'$exists':False}},{'_id':0,'id':1}):\n",
    "    hotel_id=item['id']\n",
    "    c.stg.jiudian_hotels.update_one({'id':hotel_id},{'$set':{'rooms':[]}})\n",
    "    count+=1\n",
    "    print(hotel_id,count)\n",
    "#     break"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      ">9999/1000\r"
     ]
    }
   ],
   "source": [
    "import time\n",
    "for i in range(10000):\n",
    "    print(\"{:>>5}/{}\".format(i,1000),end=\"\\r\")\n",
    "    time.sleep(0.001)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
