{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from state_machine import *\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n",
      "True\n",
      "False\n",
      "Billy: I will run\n",
      "True\n",
      "Billy is sleepy\n",
      "Billy is REALLY sleepy\n",
      "Zzzzzzzzzzzz\n",
      "Zzzzzzzzzzzzzzzzzzzzzz\n"
     ]
    }
   ],
   "source": [
    "@acts_as_state_machine\n",
    "class Person():\n",
    "    name = 'Billy'\n",
    "\n",
    "    sleeping = State(initial=True)\n",
    "    running = State()\n",
    "    cleaning = State()\n",
    "\n",
    "    run = Event(from_states=sleeping, to_state=running)\n",
    "    cleanup = Event(from_states=running, to_state=cleaning)\n",
    "    sleep = Event(from_states=(running, cleaning), to_state=sleeping)\n",
    "\n",
    "    @before('run')\n",
    "    def pre_runing(self):\n",
    "        print(\"{}: I will run\".format(self.name))\n",
    "        \n",
    "    @before('sleep')\n",
    "    def do_one_thing(self):\n",
    "        print (\"{} is sleepy\".format(self.name))\n",
    "\n",
    "    @before('sleep')\n",
    "    def do_another_thing(self):\n",
    "        print (\"{} is REALLY sleepy\".format(self.name))\n",
    "\n",
    "    @after('sleep')\n",
    "    def snore(self):\n",
    "        print (\"Zzzzzzzzzzzz\")\n",
    "\n",
    "    @after('sleep')\n",
    "    def big_snore(self):\n",
    "        print (\"Zzzzzzzzzzzzzzzzzzzzzz\")\n",
    "\n",
    "person = Person()\n",
    "print (person.current_state == Person.sleeping)       # True\n",
    "print (person.is_sleeping)                            # True\n",
    "print (person.is_running )                            # False\n",
    "person.run()\n",
    "print (person.is_running)                             # True\n",
    "person.sleep()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
